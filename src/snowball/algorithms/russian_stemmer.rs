//! Generated by Snowball 2.2.0 - https://snowballstem.org/

#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_mut)]
#![allow(unused_parens)]
#![allow(unused_variables)]
use snowball::Among;
use snowball::SnowballEnv;

static A_0: &'static [Among<Context>; 9] = &[
    Among("\u{0432}\u{0448}\u{0438}\u{0441}\u{044C}", -1, 1, None),
    Among(
        "\u{044B}\u{0432}\u{0448}\u{0438}\u{0441}\u{044C}",
        0,
        2,
        None,
    ),
    Among(
        "\u{0438}\u{0432}\u{0448}\u{0438}\u{0441}\u{044C}",
        0,
        2,
        None,
    ),
    Among("\u{0432}", -1, 1, None),
    Among("\u{044B}\u{0432}", 3, 2, None),
    Among("\u{0438}\u{0432}", 3, 2, None),
    Among("\u{0432}\u{0448}\u{0438}", -1, 1, None),
    Among("\u{044B}\u{0432}\u{0448}\u{0438}", 6, 2, None),
    Among("\u{0438}\u{0432}\u{0448}\u{0438}", 6, 2, None),
];

static A_1: &'static [Among<Context>; 26] = &[
    Among("\u{0435}\u{043C}\u{0443}", -1, 1, None),
    Among("\u{043E}\u{043C}\u{0443}", -1, 1, None),
    Among("\u{044B}\u{0445}", -1, 1, None),
    Among("\u{0438}\u{0445}", -1, 1, None),
    Among("\u{0443}\u{044E}", -1, 1, None),
    Among("\u{044E}\u{044E}", -1, 1, None),
    Among("\u{0435}\u{044E}", -1, 1, None),
    Among("\u{043E}\u{044E}", -1, 1, None),
    Among("\u{044F}\u{044F}", -1, 1, None),
    Among("\u{0430}\u{044F}", -1, 1, None),
    Among("\u{044B}\u{0435}", -1, 1, None),
    Among("\u{0435}\u{0435}", -1, 1, None),
    Among("\u{0438}\u{0435}", -1, 1, None),
    Among("\u{043E}\u{0435}", -1, 1, None),
    Among("\u{044B}\u{043C}\u{0438}", -1, 1, None),
    Among("\u{0438}\u{043C}\u{0438}", -1, 1, None),
    Among("\u{044B}\u{0439}", -1, 1, None),
    Among("\u{0435}\u{0439}", -1, 1, None),
    Among("\u{0438}\u{0439}", -1, 1, None),
    Among("\u{043E}\u{0439}", -1, 1, None),
    Among("\u{044B}\u{043C}", -1, 1, None),
    Among("\u{0435}\u{043C}", -1, 1, None),
    Among("\u{0438}\u{043C}", -1, 1, None),
    Among("\u{043E}\u{043C}", -1, 1, None),
    Among("\u{0435}\u{0433}\u{043E}", -1, 1, None),
    Among("\u{043E}\u{0433}\u{043E}", -1, 1, None),
];

static A_2: &'static [Among<Context>; 8] = &[
    Among("\u{0432}\u{0448}", -1, 1, None),
    Among("\u{044B}\u{0432}\u{0448}", 0, 2, None),
    Among("\u{0438}\u{0432}\u{0448}", 0, 2, None),
    Among("\u{0449}", -1, 1, None),
    Among("\u{044E}\u{0449}", 3, 1, None),
    Among("\u{0443}\u{044E}\u{0449}", 4, 2, None),
    Among("\u{0435}\u{043C}", -1, 1, None),
    Among("\u{043D}\u{043D}", -1, 1, None),
];

static A_3: &'static [Among<Context>; 2] = &[
    Among("\u{0441}\u{044C}", -1, 1, None),
    Among("\u{0441}\u{044F}", -1, 1, None),
];

static A_4: &'static [Among<Context>; 46] = &[
    Among("\u{044B}\u{0442}", -1, 2, None),
    Among("\u{044E}\u{0442}", -1, 1, None),
    Among("\u{0443}\u{044E}\u{0442}", 1, 2, None),
    Among("\u{044F}\u{0442}", -1, 2, None),
    Among("\u{0435}\u{0442}", -1, 1, None),
    Among("\u{0443}\u{0435}\u{0442}", 4, 2, None),
    Among("\u{0438}\u{0442}", -1, 2, None),
    Among("\u{043D}\u{044B}", -1, 1, None),
    Among("\u{0435}\u{043D}\u{044B}", 7, 2, None),
    Among("\u{0442}\u{044C}", -1, 1, None),
    Among("\u{044B}\u{0442}\u{044C}", 9, 2, None),
    Among("\u{0438}\u{0442}\u{044C}", 9, 2, None),
    Among("\u{0435}\u{0448}\u{044C}", -1, 1, None),
    Among("\u{0438}\u{0448}\u{044C}", -1, 2, None),
    Among("\u{044E}", -1, 2, None),
    Among("\u{0443}\u{044E}", 14, 2, None),
    Among("\u{043B}\u{0430}", -1, 1, None),
    Among("\u{044B}\u{043B}\u{0430}", 16, 2, None),
    Among("\u{0438}\u{043B}\u{0430}", 16, 2, None),
    Among("\u{043D}\u{0430}", -1, 1, None),
    Among("\u{0435}\u{043D}\u{0430}", 19, 2, None),
    Among("\u{0435}\u{0442}\u{0435}", -1, 1, None),
    Among("\u{0438}\u{0442}\u{0435}", -1, 2, None),
    Among("\u{0439}\u{0442}\u{0435}", -1, 1, None),
    Among("\u{0443}\u{0439}\u{0442}\u{0435}", 23, 2, None),
    Among("\u{0435}\u{0439}\u{0442}\u{0435}", 23, 2, None),
    Among("\u{043B}\u{0438}", -1, 1, None),
    Among("\u{044B}\u{043B}\u{0438}", 26, 2, None),
    Among("\u{0438}\u{043B}\u{0438}", 26, 2, None),
    Among("\u{0439}", -1, 1, None),
    Among("\u{0443}\u{0439}", 29, 2, None),
    Among("\u{0435}\u{0439}", 29, 2, None),
    Among("\u{043B}", -1, 1, None),
    Among("\u{044B}\u{043B}", 32, 2, None),
    Among("\u{0438}\u{043B}", 32, 2, None),
    Among("\u{044B}\u{043C}", -1, 2, None),
    Among("\u{0435}\u{043C}", -1, 1, None),
    Among("\u{0438}\u{043C}", -1, 2, None),
    Among("\u{043D}", -1, 1, None),
    Among("\u{0435}\u{043D}", 38, 2, None),
    Among("\u{043B}\u{043E}", -1, 1, None),
    Among("\u{044B}\u{043B}\u{043E}", 40, 2, None),
    Among("\u{0438}\u{043B}\u{043E}", 40, 2, None),
    Among("\u{043D}\u{043E}", -1, 1, None),
    Among("\u{0435}\u{043D}\u{043E}", 43, 2, None),
    Among("\u{043D}\u{043D}\u{043E}", 43, 1, None),
];

static A_5: &'static [Among<Context>; 36] = &[
    Among("\u{0443}", -1, 1, None),
    Among("\u{044F}\u{0445}", -1, 1, None),
    Among("\u{0438}\u{044F}\u{0445}", 1, 1, None),
    Among("\u{0430}\u{0445}", -1, 1, None),
    Among("\u{044B}", -1, 1, None),
    Among("\u{044C}", -1, 1, None),
    Among("\u{044E}", -1, 1, None),
    Among("\u{044C}\u{044E}", 6, 1, None),
    Among("\u{0438}\u{044E}", 6, 1, None),
    Among("\u{044F}", -1, 1, None),
    Among("\u{044C}\u{044F}", 9, 1, None),
    Among("\u{0438}\u{044F}", 9, 1, None),
    Among("\u{0430}", -1, 1, None),
    Among("\u{0435}\u{0432}", -1, 1, None),
    Among("\u{043E}\u{0432}", -1, 1, None),
    Among("\u{0435}", -1, 1, None),
    Among("\u{044C}\u{0435}", 15, 1, None),
    Among("\u{0438}\u{0435}", 15, 1, None),
    Among("\u{0438}", -1, 1, None),
    Among("\u{0435}\u{0438}", 18, 1, None),
    Among("\u{0438}\u{0438}", 18, 1, None),
    Among("\u{044F}\u{043C}\u{0438}", 18, 1, None),
    Among("\u{0438}\u{044F}\u{043C}\u{0438}", 21, 1, None),
    Among("\u{0430}\u{043C}\u{0438}", 18, 1, None),
    Among("\u{0439}", -1, 1, None),
    Among("\u{0435}\u{0439}", 24, 1, None),
    Among("\u{0438}\u{0435}\u{0439}", 25, 1, None),
    Among("\u{0438}\u{0439}", 24, 1, None),
    Among("\u{043E}\u{0439}", 24, 1, None),
    Among("\u{044F}\u{043C}", -1, 1, None),
    Among("\u{0438}\u{044F}\u{043C}", 29, 1, None),
    Among("\u{0430}\u{043C}", -1, 1, None),
    Among("\u{0435}\u{043C}", -1, 1, None),
    Among("\u{0438}\u{0435}\u{043C}", 32, 1, None),
    Among("\u{043E}\u{043C}", -1, 1, None),
    Among("\u{043E}", -1, 1, None),
];

static A_6: &'static [Among<Context>; 2] = &[
    Among("\u{043E}\u{0441}\u{0442}", -1, 1, None),
    Among("\u{043E}\u{0441}\u{0442}\u{044C}", -1, 1, None),
];

static A_7: &'static [Among<Context>; 4] = &[
    Among("\u{0435}\u{0439}\u{0448}", -1, 1, None),
    Among("\u{044C}", -1, 3, None),
    Among("\u{0435}\u{0439}\u{0448}\u{0435}", -1, 1, None),
    Among("\u{043D}", -1, 2, None),
];

static G_v: &'static [u8; 4] = &[33, 65, 8, 232];

#[derive(Clone)]
struct Context {
    i_p2: i32,
    i_pV: i32,
}

fn r_mark_regions(env: &mut SnowballEnv, context: &mut Context) -> bool {
    context.i_pV = env.limit;
    context.i_p2 = env.limit;
    let v_1 = env.cursor;
    'lab0: loop {
        'golab1: loop {
            'lab2: loop {
                if !env.in_grouping(G_v, 1072, 1103) {
                    break 'lab2;
                }
                break 'golab1;
            }
            if env.cursor >= env.limit {
                break 'lab0;
            }
            env.next_char();
        }
        context.i_pV = env.cursor;
        'golab3: loop {
            'lab4: loop {
                if !env.out_grouping(G_v, 1072, 1103) {
                    break 'lab4;
                }
                break 'golab3;
            }
            if env.cursor >= env.limit {
                break 'lab0;
            }
            env.next_char();
        }
        'golab5: loop {
            'lab6: loop {
                if !env.in_grouping(G_v, 1072, 1103) {
                    break 'lab6;
                }
                break 'golab5;
            }
            if env.cursor >= env.limit {
                break 'lab0;
            }
            env.next_char();
        }
        'golab7: loop {
            'lab8: loop {
                if !env.out_grouping(G_v, 1072, 1103) {
                    break 'lab8;
                }
                break 'golab7;
            }
            if env.cursor >= env.limit {
                break 'lab0;
            }
            env.next_char();
        }
        context.i_p2 = env.cursor;
        break 'lab0;
    }
    env.cursor = v_1;
    return true;
}

fn r_R2(env: &mut SnowballEnv, context: &mut Context) -> bool {
    return context.i_p2 <= env.cursor;
}

fn r_perfective_gerund(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    env.ket = env.cursor;
    among_var = env.find_among_b(A_0, context);
    if among_var == 0 {
        return false;
    }
    env.bra = env.cursor;
    match among_var {
        1 => {
            'lab0: loop {
                let v_1 = env.limit - env.cursor;
                'lab1: loop {
                    if !env.eq_s_b(&"\u{0430}") {
                        break 'lab1;
                    }
                    break 'lab0;
                }
                env.cursor = env.limit - v_1;
                if !env.eq_s_b(&"\u{044F}") {
                    return false;
                }
                break 'lab0;
            }
            if !env.slice_del() {
                return false;
            }
        }
        2 => {
            if !env.slice_del() {
                return false;
            }
        }
        _ => (),
    }
    return true;
}

fn r_adjective(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if env.find_among_b(A_1, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    return true;
}

fn r_adjectival(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    if !r_adjective(env, context) {
        return false;
    }
    let v_1 = env.limit - env.cursor;
    'lab0: loop {
        env.ket = env.cursor;
        among_var = env.find_among_b(A_2, context);
        if among_var == 0 {
            env.cursor = env.limit - v_1;
            break 'lab0;
        }
        env.bra = env.cursor;
        match among_var {
            1 => {
                'lab1: loop {
                    let v_2 = env.limit - env.cursor;
                    'lab2: loop {
                        if !env.eq_s_b(&"\u{0430}") {
                            break 'lab2;
                        }
                        break 'lab1;
                    }
                    env.cursor = env.limit - v_2;
                    if !env.eq_s_b(&"\u{044F}") {
                        env.cursor = env.limit - v_1;
                        break 'lab0;
                    }
                    break 'lab1;
                }
                if !env.slice_del() {
                    return false;
                }
            }
            2 => {
                if !env.slice_del() {
                    return false;
                }
            }
            _ => (),
        }
        break 'lab0;
    }
    return true;
}

fn r_reflexive(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if (env.cursor - 3 <= env.limit_backward
        || (env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 140 as u8
            && env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 143 as u8))
    {
        return false;
    }
    if env.find_among_b(A_3, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    return true;
}

fn r_verb(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    env.ket = env.cursor;
    among_var = env.find_among_b(A_4, context);
    if among_var == 0 {
        return false;
    }
    env.bra = env.cursor;
    match among_var {
        1 => {
            'lab0: loop {
                let v_1 = env.limit - env.cursor;
                'lab1: loop {
                    if !env.eq_s_b(&"\u{0430}") {
                        break 'lab1;
                    }
                    break 'lab0;
                }
                env.cursor = env.limit - v_1;
                if !env.eq_s_b(&"\u{044F}") {
                    return false;
                }
                break 'lab0;
            }
            if !env.slice_del() {
                return false;
            }
        }
        2 => {
            if !env.slice_del() {
                return false;
            }
        }
        _ => (),
    }
    return true;
}

fn r_noun(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if env.find_among_b(A_5, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    return true;
}

fn r_derivational(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if (env.cursor - 5 <= env.limit_backward
        || (env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 130 as u8
            && env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 140 as u8))
    {
        return false;
    }
    if env.find_among_b(A_6, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !r_R2(env, context) {
        return false;
    }
    if !env.slice_del() {
        return false;
    }
    return true;
}

fn r_tidy_up(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    env.ket = env.cursor;
    among_var = env.find_among_b(A_7, context);
    if among_var == 0 {
        return false;
    }
    env.bra = env.cursor;
    match among_var {
        1 => {
            if !env.slice_del() {
                return false;
            }
            env.ket = env.cursor;
            if !env.eq_s_b(&"\u{043D}") {
                return false;
            }
            env.bra = env.cursor;
            if !env.eq_s_b(&"\u{043D}") {
                return false;
            }
            if !env.slice_del() {
                return false;
            }
        }
        2 => {
            if !env.eq_s_b(&"\u{043D}") {
                return false;
            }
            if !env.slice_del() {
                return false;
            }
        }
        3 => {
            if !env.slice_del() {
                return false;
            }
        }
        _ => (),
    }
    return true;
}

pub fn stem(env: &mut SnowballEnv) -> bool {
    let mut context = &mut Context { i_p2: 0, i_pV: 0 };
    let v_1 = env.cursor;
    'lab0: loop {
        'replab1: loop {
            let v_2 = env.cursor;
            'lab2: for _ in 0..1 {
                'golab3: loop {
                    let v_3 = env.cursor;
                    'lab4: loop {
                        env.bra = env.cursor;
                        if !env.eq_s(&"\u{0451}") {
                            break 'lab4;
                        }
                        env.ket = env.cursor;
                        env.cursor = v_3;
                        break 'golab3;
                    }
                    env.cursor = v_3;
                    if env.cursor >= env.limit {
                        break 'lab2;
                    }
                    env.next_char();
                }
                if !env.slice_from("\u{0435}") {
                    return false;
                }
                continue 'replab1;
            }
            env.cursor = v_2;
            break 'replab1;
        }
        break 'lab0;
    }
    env.cursor = v_1;
    r_mark_regions(env, context);
    env.limit_backward = env.cursor;
    env.cursor = env.limit;
    if env.cursor < context.i_pV {
        return false;
    }
    let v_6 = env.limit_backward;
    env.limit_backward = context.i_pV;
    let v_7 = env.limit - env.cursor;
    'lab5: loop {
        'lab6: loop {
            let v_8 = env.limit - env.cursor;
            'lab7: loop {
                if !r_perfective_gerund(env, context) {
                    break 'lab7;
                }
                break 'lab6;
            }
            env.cursor = env.limit - v_8;
            let v_9 = env.limit - env.cursor;
            'lab8: loop {
                if !r_reflexive(env, context) {
                    env.cursor = env.limit - v_9;
                    break 'lab8;
                }
                break 'lab8;
            }
            'lab9: loop {
                let v_10 = env.limit - env.cursor;
                'lab10: loop {
                    if !r_adjectival(env, context) {
                        break 'lab10;
                    }
                    break 'lab9;
                }
                env.cursor = env.limit - v_10;
                'lab11: loop {
                    if !r_verb(env, context) {
                        break 'lab11;
                    }
                    break 'lab9;
                }
                env.cursor = env.limit - v_10;
                if !r_noun(env, context) {
                    break 'lab5;
                }
                break 'lab9;
            }
            break 'lab6;
        }
        break 'lab5;
    }
    env.cursor = env.limit - v_7;
    let v_11 = env.limit - env.cursor;
    'lab12: loop {
        env.ket = env.cursor;
        if !env.eq_s_b(&"\u{0438}") {
            env.cursor = env.limit - v_11;
            break 'lab12;
        }
        env.bra = env.cursor;
        if !env.slice_del() {
            return false;
        }
        break 'lab12;
    }
    let v_12 = env.limit - env.cursor;
    r_derivational(env, context);
    env.cursor = env.limit - v_12;
    let v_13 = env.limit - env.cursor;
    r_tidy_up(env, context);
    env.cursor = env.limit - v_13;
    env.limit_backward = v_6;
    env.cursor = env.limit_backward;
    return true;
}
