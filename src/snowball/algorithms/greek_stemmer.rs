//! Generated by Snowball 2.2.0 - https://snowballstem.org/

#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_mut)]
#![allow(unused_parens)]
#![allow(unused_variables)]
use snowball::Among;
use snowball::SnowballEnv;

static A_0: &'static [Among<Context>; 46] = &[
    Among("", -1, 25, None),
    Among("\u{03C2}", 0, 18, None),
    Among("\u{0386}", 0, 1, None),
    Among("\u{0388}", 0, 5, None),
    Among("\u{0389}", 0, 7, None),
    Among("\u{038A}", 0, 9, None),
    Among("\u{03CA}", 0, 7, None),
    Among("\u{03CB}", 0, 20, None),
    Among("\u{038C}", 0, 15, None),
    Among("\u{03CC}", 0, 15, None),
    Among("\u{03CD}", 0, 20, None),
    Among("\u{038E}", 0, 20, None),
    Among("\u{03CE}", 0, 24, None),
    Among("\u{038F}", 0, 24, None),
    Among("\u{0390}", 0, 7, None),
    Among("\u{0391}", 0, 1, None),
    Among("\u{0392}", 0, 2, None),
    Among("\u{0393}", 0, 3, None),
    Among("\u{0394}", 0, 4, None),
    Among("\u{0395}", 0, 5, None),
    Among("\u{0396}", 0, 6, None),
    Among("\u{0397}", 0, 7, None),
    Among("\u{0398}", 0, 8, None),
    Among("\u{0399}", 0, 9, None),
    Among("\u{039A}", 0, 10, None),
    Among("\u{039B}", 0, 11, None),
    Among("\u{039C}", 0, 12, None),
    Among("\u{039D}", 0, 13, None),
    Among("\u{039E}", 0, 14, None),
    Among("\u{039F}", 0, 15, None),
    Among("\u{03A0}", 0, 16, None),
    Among("\u{03A1}", 0, 17, None),
    Among("\u{03A3}", 0, 18, None),
    Among("\u{03A4}", 0, 19, None),
    Among("\u{03A5}", 0, 20, None),
    Among("\u{03A6}", 0, 21, None),
    Among("\u{03A7}", 0, 22, None),
    Among("\u{03A8}", 0, 23, None),
    Among("\u{03A9}", 0, 24, None),
    Among("\u{03AA}", 0, 9, None),
    Among("\u{03AB}", 0, 20, None),
    Among("\u{03AC}", 0, 1, None),
    Among("\u{03AD}", 0, 5, None),
    Among("\u{03AE}", 0, 7, None),
    Among("\u{03AF}", 0, 9, None),
    Among("\u{03B0}", 0, 20, None),
];

static A_1: &'static [Among<Context>; 40] = &[
    Among(
        "\u{03BA}\u{03B1}\u{03B8}\u{03B5}\u{03C3}\u{03C4}\u{03C9}\u{03C3}",
        -1,
        10,
        None,
    ),
    Among("\u{03C6}\u{03C9}\u{03C3}", -1, 9, None),
    Among("\u{03C0}\u{03B5}\u{03C1}\u{03B1}\u{03C3}", -1, 7, None),
    Among("\u{03C4}\u{03B5}\u{03C1}\u{03B1}\u{03C3}", -1, 8, None),
    Among("\u{03BA}\u{03C1}\u{03B5}\u{03B1}\u{03C3}", -1, 6, None),
    Among(
        "\u{03BA}\u{03B1}\u{03B8}\u{03B5}\u{03C3}\u{03C4}\u{03C9}\u{03C4}\u{03BF}\u{03C3}",
        -1,
        10,
        None,
    ),
    Among("\u{03C6}\u{03C9}\u{03C4}\u{03BF}\u{03C3}", -1, 9, None),
    Among(
        "\u{03C0}\u{03B5}\u{03C1}\u{03B1}\u{03C4}\u{03BF}\u{03C3}",
        -1,
        7,
        None,
    ),
    Among(
        "\u{03C4}\u{03B5}\u{03C1}\u{03B1}\u{03C4}\u{03BF}\u{03C3}",
        -1,
        8,
        None,
    ),
    Among(
        "\u{03BA}\u{03C1}\u{03B5}\u{03B1}\u{03C4}\u{03BF}\u{03C3}",
        -1,
        6,
        None,
    ),
    Among(
        "\u{03B3}\u{03B5}\u{03B3}\u{03BF}\u{03BD}\u{03BF}\u{03C4}\u{03BF}\u{03C3}",
        -1,
        11,
        None,
    ),
    Among(
        "\u{03B3}\u{03B5}\u{03B3}\u{03BF}\u{03BD}\u{03BF}\u{03C3}",
        -1,
        11,
        None,
    ),
    Among(
        "\u{03C6}\u{03B1}\u{03B3}\u{03B9}\u{03BF}\u{03C5}",
        -1,
        1,
        None,
    ),
    Among(
        "\u{03C3}\u{03BA}\u{03B1}\u{03B3}\u{03B9}\u{03BF}\u{03C5}",
        -1,
        2,
        None,
    ),
    Among(
        "\u{03C3}\u{03BF}\u{03B3}\u{03B9}\u{03BF}\u{03C5}",
        -1,
        4,
        None,
    ),
    Among(
        "\u{03C4}\u{03B1}\u{03C4}\u{03BF}\u{03B3}\u{03B9}\u{03BF}\u{03C5}",
        -1,
        5,
        None,
    ),
    Among(
        "\u{03BF}\u{03BB}\u{03BF}\u{03B3}\u{03B9}\u{03BF}\u{03C5}",
        -1,
        3,
        None,
    ),
    Among(
        "\u{03BA}\u{03B1}\u{03B8}\u{03B5}\u{03C3}\u{03C4}\u{03C9}\u{03C4}\u{03B1}",
        -1,
        10,
        None,
    ),
    Among("\u{03C6}\u{03C9}\u{03C4}\u{03B1}", -1, 9, None),
    Among(
        "\u{03C0}\u{03B5}\u{03C1}\u{03B1}\u{03C4}\u{03B1}",
        -1,
        7,
        None,
    ),
    Among(
        "\u{03C4}\u{03B5}\u{03C1}\u{03B1}\u{03C4}\u{03B1}",
        -1,
        8,
        None,
    ),
    Among(
        "\u{03BA}\u{03C1}\u{03B5}\u{03B1}\u{03C4}\u{03B1}",
        -1,
        6,
        None,
    ),
    Among(
        "\u{03B3}\u{03B5}\u{03B3}\u{03BF}\u{03BD}\u{03BF}\u{03C4}\u{03B1}",
        -1,
        11,
        None,
    ),
    Among("\u{03C6}\u{03B1}\u{03B3}\u{03B9}\u{03B1}", -1, 1, None),
    Among(
        "\u{03C3}\u{03BA}\u{03B1}\u{03B3}\u{03B9}\u{03B1}",
        -1,
        2,
        None,
    ),
    Among("\u{03C3}\u{03BF}\u{03B3}\u{03B9}\u{03B1}", -1, 4, None),
    Among(
        "\u{03C4}\u{03B1}\u{03C4}\u{03BF}\u{03B3}\u{03B9}\u{03B1}",
        -1,
        5,
        None,
    ),
    Among(
        "\u{03BF}\u{03BB}\u{03BF}\u{03B3}\u{03B9}\u{03B1}",
        -1,
        3,
        None,
    ),
    Among(
        "\u{03C0}\u{03B5}\u{03C1}\u{03B1}\u{03C4}\u{03B7}",
        -1,
        7,
        None,
    ),
    Among(
        "\u{03BA}\u{03B1}\u{03B8}\u{03B5}\u{03C3}\u{03C4}\u{03C9}\u{03C4}\u{03C9}\u{03BD}",
        -1,
        10,
        None,
    ),
    Among("\u{03C6}\u{03C9}\u{03C4}\u{03C9}\u{03BD}", -1, 9, None),
    Among(
        "\u{03C0}\u{03B5}\u{03C1}\u{03B1}\u{03C4}\u{03C9}\u{03BD}",
        -1,
        7,
        None,
    ),
    Among(
        "\u{03C4}\u{03B5}\u{03C1}\u{03B1}\u{03C4}\u{03C9}\u{03BD}",
        -1,
        8,
        None,
    ),
    Among(
        "\u{03BA}\u{03C1}\u{03B5}\u{03B1}\u{03C4}\u{03C9}\u{03BD}",
        -1,
        6,
        None,
    ),
    Among(
        "\u{03B3}\u{03B5}\u{03B3}\u{03BF}\u{03BD}\u{03BF}\u{03C4}\u{03C9}\u{03BD}",
        -1,
        11,
        None,
    ),
    Among(
        "\u{03C6}\u{03B1}\u{03B3}\u{03B9}\u{03C9}\u{03BD}",
        -1,
        1,
        None,
    ),
    Among(
        "\u{03C3}\u{03BA}\u{03B1}\u{03B3}\u{03B9}\u{03C9}\u{03BD}",
        -1,
        2,
        None,
    ),
    Among(
        "\u{03C3}\u{03BF}\u{03B3}\u{03B9}\u{03C9}\u{03BD}",
        -1,
        4,
        None,
    ),
    Among(
        "\u{03C4}\u{03B1}\u{03C4}\u{03BF}\u{03B3}\u{03B9}\u{03C9}\u{03BD}",
        -1,
        5,
        None,
    ),
    Among(
        "\u{03BF}\u{03BB}\u{03BF}\u{03B3}\u{03B9}\u{03C9}\u{03BD}",
        -1,
        3,
        None,
    ),
];

static A_2: &'static [Among<Context>; 31] = &[
    Among("\u{03C0}", -1, 2, None),
    Among("\u{03B9}\u{03BC}\u{03C0}", 0, 2, None),
    Among("\u{03C1}", -1, 2, None),
    Among("\u{03C0}\u{03C1}", 2, 2, None),
    Among("\u{03BC}\u{03C0}\u{03C1}", 3, 2, None),
    Among("\u{03B1}\u{03C1}\u{03C1}", 2, 2, None),
    Among(
        "\u{03B3}\u{03BB}\u{03C5}\u{03BA}\u{03C5}\u{03C1}",
        2,
        2,
        None,
    ),
    Among("\u{03C0}\u{03BF}\u{03BB}\u{03C5}\u{03C1}", 2, 2, None),
    Among("\u{03B1}\u{03BC}\u{03C0}\u{03B1}\u{03C1}", 2, 2, None),
    Among("\u{03BC}\u{03B1}\u{03C1}", 2, 2, None),
    Among("\u{03B3}\u{03BA}\u{03C1}", 2, 2, None),
    Among(
        "\u{03C0}\u{03B9}\u{03C0}\u{03B5}\u{03C1}\u{03BF}\u{03C1}",
        2,
        2,
        None,
    ),
    Among(
        "\u{03B2}\u{03BF}\u{03BB}\u{03B2}\u{03BF}\u{03C1}",
        2,
        2,
        None,
    ),
    Among(
        "\u{03B3}\u{03BB}\u{03C5}\u{03BA}\u{03BF}\u{03C1}",
        2,
        2,
        None,
    ),
    Among("\u{03BB}\u{03BF}\u{03C5}", -1, 2, None),
    Among("\u{03C0}\u{03B1}", -1, 1, None),
    Among(
        "\u{03BE}\u{03B1}\u{03BD}\u{03B1}\u{03C0}\u{03B1}",
        15,
        1,
        None,
    ),
    Among("\u{03B5}\u{03C0}\u{03B1}", 15, 1, None),
    Among(
        "\u{03C0}\u{03B5}\u{03C1}\u{03B9}\u{03C0}\u{03B1}",
        15,
        1,
        None,
    ),
    Among(
        "\u{03B1}\u{03BD}\u{03B1}\u{03BC}\u{03C0}\u{03B1}",
        15,
        1,
        None,
    ),
    Among("\u{03B5}\u{03BC}\u{03C0}\u{03B1}", 15, 1, None),
    Among("\u{03B2}", -1, 2, None),
    Among("\u{03B4}\u{03B1}\u{03BD}\u{03B5}", -1, 1, None),
    Among(
        "\u{03B2}\u{03B1}\u{03B8}\u{03C5}\u{03C1}\u{03B9}",
        -1,
        2,
        None,
    ),
    Among("\u{03B2}\u{03B1}\u{03C1}\u{03BA}", -1, 2, None),
    Among("\u{03BC}\u{03B1}\u{03C1}\u{03BA}", -1, 2, None),
    Among("\u{03BB}", -1, 2, None),
    Among("\u{03BC}", -1, 2, None),
    Among("\u{03BA}\u{03BF}\u{03C1}\u{03BD}", -1, 2, None),
    Among("\u{03B1}\u{03B8}\u{03C1}\u{03BF}", -1, 1, None),
    Among(
        "\u{03C3}\u{03C5}\u{03BD}\u{03B1}\u{03B8}\u{03C1}\u{03BF}",
        29,
        1,
        None,
    ),
];

static A_3: &'static [Among<Context>; 14] = &[
    Among("\u{03B9}\u{03B6}\u{03B5}\u{03C3}", -1, 1, None),
    Among("\u{03B9}\u{03B6}\u{03B5}\u{03B9}\u{03C3}", -1, 1, None),
    Among("\u{03B9}\u{03B6}\u{03C9}", -1, 1, None),
    Among("\u{03B9}\u{03B6}\u{03B1}", -1, 1, None),
    Among("\u{03B9}\u{03B6}\u{03B1}\u{03C4}\u{03B5}", -1, 1, None),
    Among("\u{03B9}\u{03B6}\u{03B5}\u{03C4}\u{03B5}", -1, 1, None),
    Among("\u{03B9}\u{03B6}\u{03B5}", -1, 1, None),
    Among(
        "\u{03B9}\u{03B6}\u{03BF}\u{03C5}\u{03BC}\u{03B5}",
        -1,
        1,
        None,
    ),
    Among("\u{03B9}\u{03B6}\u{03B1}\u{03BC}\u{03B5}", -1, 1, None),
    Among(
        "\u{03B9}\u{03B6}\u{03BF}\u{03C5}\u{03BD}\u{03B5}",
        -1,
        1,
        None,
    ),
    Among("\u{03B9}\u{03B6}\u{03B1}\u{03BD}\u{03B5}", -1, 1, None),
    Among("\u{03B9}\u{03B6}\u{03B5}\u{03B9}", -1, 1, None),
    Among("\u{03B9}\u{03B6}\u{03BF}\u{03C5}\u{03BD}", -1, 1, None),
    Among("\u{03B9}\u{03B6}\u{03B1}\u{03BD}", -1, 1, None),
];

static A_4: &'static [Among<Context>; 8] = &[
    Among("\u{03C3}", -1, 1, None),
    Among("\u{03C7}", -1, 1, None),
    Among("\u{03C5}\u{03C8}", -1, 1, None),
    Among("\u{03B6}\u{03C9}", -1, 1, None),
    Among("\u{03B2}\u{03B9}", -1, 1, None),
    Among("\u{03BB}\u{03B9}", -1, 1, None),
    Among("\u{03B1}\u{03BB}", -1, 1, None),
    Among("\u{03B5}\u{03BD}", -1, 1, None),
];

static A_5: &'static [Among<Context>; 7] = &[
    Among(
        "\u{03C9}\u{03B8}\u{03B7}\u{03BA}\u{03B5}\u{03C3}",
        -1,
        1,
        None,
    ),
    Among("\u{03C9}\u{03B8}\u{03B7}\u{03BA}\u{03B1}", -1, 1, None),
    Among(
        "\u{03C9}\u{03B8}\u{03B7}\u{03BA}\u{03B1}\u{03C4}\u{03B5}",
        -1,
        1,
        None,
    ),
    Among("\u{03C9}\u{03B8}\u{03B7}\u{03BA}\u{03B5}", -1, 1, None),
    Among(
        "\u{03C9}\u{03B8}\u{03B7}\u{03BA}\u{03B1}\u{03BC}\u{03B5}",
        -1,
        1,
        None,
    ),
    Among(
        "\u{03C9}\u{03B8}\u{03B7}\u{03BA}\u{03B1}\u{03BD}\u{03B5}",
        -1,
        1,
        None,
    ),
    Among(
        "\u{03C9}\u{03B8}\u{03B7}\u{03BA}\u{03B1}\u{03BD}",
        -1,
        1,
        None,
    ),
];

static A_6: &'static [Among<Context>; 32] = &[
    Among("\u{03C0}", -1, 2, None),
    Among("\u{03BB}\u{03B1}\u{03C1}", -1, 2, None),
    Among(
        "\u{03B4}\u{03B7}\u{03BC}\u{03BF}\u{03BA}\u{03C1}\u{03B1}\u{03C4}",
        -1,
        2,
        None,
    ),
    Among("\u{03B1}\u{03C6}", -1, 2, None),
    Among(
        "\u{03B3}\u{03B9}\u{03B3}\u{03B1}\u{03BD}\u{03C4}\u{03BF}\u{03B1}\u{03C6}",
        3,
        2,
        None,
    ),
    Among(
        "\u{03BE}\u{03B1}\u{03BD}\u{03B1}\u{03C0}\u{03B1}",
        -1,
        1,
        None,
    ),
    Among("\u{03B5}\u{03C0}\u{03B1}", -1, 1, None),
    Among(
        "\u{03C0}\u{03B5}\u{03C1}\u{03B9}\u{03C0}\u{03B1}",
        -1,
        1,
        None,
    ),
    Among(
        "\u{03B1}\u{03BD}\u{03B1}\u{03BC}\u{03C0}\u{03B1}",
        -1,
        1,
        None,
    ),
    Among("\u{03B5}\u{03BC}\u{03C0}\u{03B1}", -1, 1, None),
    Among(
        "\u{03C7}\u{03B1}\u{03C1}\u{03C4}\u{03BF}\u{03C0}\u{03B1}",
        -1,
        1,
        None,
    ),
    Among(
        "\u{03B5}\u{03BE}\u{03B1}\u{03C1}\u{03C7}\u{03B1}",
        -1,
        1,
        None,
    ),
    Among("\u{03C0}\u{03B5}", -1, 1, None),
    Among("\u{03B5}\u{03C0}\u{03B5}", 12, 1, None),
    Among(
        "\u{03BC}\u{03B5}\u{03C4}\u{03B5}\u{03C0}\u{03B5}",
        13,
        1,
        None,
    ),
    Among("\u{03B5}\u{03C3}\u{03B5}", -1, 1, None),
    Among("\u{03B3}\u{03B5}", -1, 2, None),
    Among("\u{03B3}\u{03BA}\u{03B5}", -1, 2, None),
    Among("\u{03BA}\u{03BB}\u{03B5}", -1, 1, None),
    Among(
        "\u{03B5}\u{03C3}\u{03C9}\u{03BA}\u{03BB}\u{03B5}",
        18,
        1,
        None,
    ),
    Among("\u{03B5}\u{03BA}\u{03BB}\u{03B5}", 18, 1, None),
    Among(
        "\u{03B1}\u{03C0}\u{03B5}\u{03BA}\u{03BB}\u{03B5}",
        20,
        1,
        None,
    ),
    Among(
        "\u{03B1}\u{03C0}\u{03BF}\u{03BA}\u{03BB}\u{03B5}",
        18,
        1,
        None,
    ),
    Among("\u{03B4}\u{03B1}\u{03BD}\u{03B5}", -1, 1, None),
    Among("\u{03B3}\u{03BA}", -1, 2, None),
    Among("\u{03BC}", -1, 2, None),
    Among(
        "\u{03C0}\u{03BF}\u{03C5}\u{03BA}\u{03B1}\u{03BC}",
        25,
        2,
        None,
    ),
    Among("\u{03BA}\u{03BF}\u{03BC}", 25, 2, None),
    Among("\u{03B1}\u{03BD}", -1, 2, None),
    Among("\u{03B1}\u{03B8}\u{03C1}\u{03BF}", -1, 1, None),
    Among(
        "\u{03C3}\u{03C5}\u{03BD}\u{03B1}\u{03B8}\u{03C1}\u{03BF}",
        29,
        1,
        None,
    ),
    Among("\u{03BF}\u{03BB}\u{03BF}", -1, 2, None),
];

static A_7: &'static [Among<Context>; 7] = &[
    Among("\u{03B9}\u{03C3}\u{03B5}\u{03C3}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03B1}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03B5}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03B1}\u{03C4}\u{03B5}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03B1}\u{03BC}\u{03B5}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03B1}\u{03BD}\u{03B5}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03B1}\u{03BD}", -1, 1, None),
];

static A_8: &'static [Among<Context>; 19] = &[
    Among(
        "\u{03BE}\u{03B1}\u{03BD}\u{03B1}\u{03C0}\u{03B1}",
        -1,
        1,
        None,
    ),
    Among("\u{03B5}\u{03C0}\u{03B1}", -1, 1, None),
    Among(
        "\u{03C0}\u{03B5}\u{03C1}\u{03B9}\u{03C0}\u{03B1}",
        -1,
        1,
        None,
    ),
    Among(
        "\u{03B1}\u{03BD}\u{03B1}\u{03BC}\u{03C0}\u{03B1}",
        -1,
        1,
        None,
    ),
    Among("\u{03B5}\u{03BC}\u{03C0}\u{03B1}", -1, 1, None),
    Among(
        "\u{03C7}\u{03B1}\u{03C1}\u{03C4}\u{03BF}\u{03C0}\u{03B1}",
        -1,
        1,
        None,
    ),
    Among(
        "\u{03B5}\u{03BE}\u{03B1}\u{03C1}\u{03C7}\u{03B1}",
        -1,
        1,
        None,
    ),
    Among("\u{03C0}\u{03B5}", -1, 1, None),
    Among("\u{03B5}\u{03C0}\u{03B5}", 7, 1, None),
    Among(
        "\u{03BC}\u{03B5}\u{03C4}\u{03B5}\u{03C0}\u{03B5}",
        8,
        1,
        None,
    ),
    Among("\u{03B5}\u{03C3}\u{03B5}", -1, 1, None),
    Among("\u{03BA}\u{03BB}\u{03B5}", -1, 1, None),
    Among(
        "\u{03B5}\u{03C3}\u{03C9}\u{03BA}\u{03BB}\u{03B5}",
        11,
        1,
        None,
    ),
    Among("\u{03B5}\u{03BA}\u{03BB}\u{03B5}", 11, 1, None),
    Among(
        "\u{03B1}\u{03C0}\u{03B5}\u{03BA}\u{03BB}\u{03B5}",
        13,
        1,
        None,
    ),
    Among(
        "\u{03B1}\u{03C0}\u{03BF}\u{03BA}\u{03BB}\u{03B5}",
        11,
        1,
        None,
    ),
    Among("\u{03B4}\u{03B1}\u{03BD}\u{03B5}", -1, 1, None),
    Among("\u{03B1}\u{03B8}\u{03C1}\u{03BF}", -1, 1, None),
    Among(
        "\u{03C3}\u{03C5}\u{03BD}\u{03B1}\u{03B8}\u{03C1}\u{03BF}",
        17,
        1,
        None,
    ),
];

static A_9: &'static [Among<Context>; 7] = &[
    Among("\u{03B9}\u{03C3}\u{03B5}\u{03B9}\u{03C3}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03C9}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03B5}\u{03C4}\u{03B5}", -1, 1, None),
    Among(
        "\u{03B9}\u{03C3}\u{03BF}\u{03C5}\u{03BC}\u{03B5}",
        -1,
        1,
        None,
    ),
    Among(
        "\u{03B9}\u{03C3}\u{03BF}\u{03C5}\u{03BD}\u{03B5}",
        -1,
        1,
        None,
    ),
    Among("\u{03B9}\u{03C3}\u{03B5}\u{03B9}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03BF}\u{03C5}\u{03BD}", -1, 1, None),
];

static A_10: &'static [Among<Context>; 40] = &[
    Among("\u{03C0}", -1, 2, None),
    Among("\u{03B5}\u{03C5}\u{03C0}", 0, 2, None),
    Among("\u{03B1}\u{03C0}", 0, 2, None),
    Among("\u{03B5}\u{03BC}\u{03C0}", 0, 2, None),
    Among("\u{03B3}\u{03C5}\u{03C1}", -1, 2, None),
    Among("\u{03C7}\u{03C1}", -1, 2, None),
    Among("\u{03C7}\u{03C9}\u{03C1}", -1, 2, None),
    Among("\u{03B1}\u{03C1}", -1, 2, None),
    Among("\u{03B1}\u{03BF}\u{03C1}", -1, 2, None),
    Among("\u{03C7}\u{03C4}", -1, 2, None),
    Among("\u{03B1}\u{03C7}\u{03C4}", 9, 2, None),
    Among("\u{03BA}\u{03C4}", -1, 2, None),
    Among("\u{03B1}\u{03BA}\u{03C4}", 11, 2, None),
    Among("\u{03C3}\u{03C7}", -1, 2, None),
    Among("\u{03B1}\u{03C3}\u{03C7}", 13, 2, None),
    Among("\u{03C4}\u{03B1}\u{03C7}", -1, 2, None),
    Among("\u{03C5}\u{03C8}", -1, 2, None),
    Among("\u{03B1}\u{03C4}\u{03B1}", -1, 2, None),
    Among("\u{03C6}\u{03B1}", -1, 2, None),
    Among("\u{03B7}\u{03C6}\u{03B1}", 18, 2, None),
    Among("\u{03BB}\u{03C5}\u{03B3}", -1, 2, None),
    Among("\u{03BC}\u{03B5}\u{03B3}", -1, 2, None),
    Among("\u{03B7}\u{03B4}", -1, 2, None),
    Among("\u{03C3}\u{03B5}", -1, 1, None),
    Among("\u{03B1}\u{03C3}\u{03B5}", 23, 1, None),
    Among("\u{03C0}\u{03BB}\u{03B5}", -1, 1, None),
    Among("\u{03BA}\u{03BB}\u{03B5}", -1, 1, None),
    Among(
        "\u{03B5}\u{03C3}\u{03C9}\u{03BA}\u{03BB}\u{03B5}",
        26,
        1,
        None,
    ),
    Among("\u{03B4}\u{03B1}\u{03BD}\u{03B5}", -1, 1, None),
    Among("\u{03B5}\u{03C7}\u{03B8}", -1, 2, None),
    Among("\u{03BA}\u{03B1}\u{03B8}", -1, 2, None),
    Among("\u{03C3}\u{03BA}", -1, 2, None),
    Among("\u{03BA}\u{03B1}\u{03BA}", -1, 2, None),
    Among("\u{03BC}\u{03B1}\u{03BA}", -1, 2, None),
    Among("\u{03BA}\u{03C5}\u{03BB}", -1, 2, None),
    Among("\u{03C6}\u{03B9}\u{03BB}", -1, 2, None),
    Among("\u{03BC}", -1, 2, None),
    Among("\u{03B3}\u{03B5}\u{03BC}", 36, 2, None),
    Among("\u{03B1}\u{03C7}\u{03BD}", -1, 2, None),
    Among(
        "\u{03C3}\u{03C5}\u{03BD}\u{03B1}\u{03B8}\u{03C1}\u{03BF}",
        -1,
        1,
        None,
    ),
];

static A_11: &'static [Among<Context>; 11] = &[
    Among(
        "\u{03B9}\u{03C3}\u{03C4}\u{03BF}\u{03C5}\u{03C3}",
        -1,
        1,
        None,
    ),
    Among("\u{03B9}\u{03C3}\u{03C4}\u{03B5}\u{03C3}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03C4}\u{03B7}\u{03C3}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03C4}\u{03BF}\u{03C3}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03C4}\u{03BF}\u{03C5}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03C4}\u{03B1}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03C4}\u{03B5}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03C4}\u{03B7}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03C4}\u{03BF}\u{03B9}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03C4}\u{03C9}\u{03BD}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03C4}\u{03BF}", -1, 1, None),
];

static A_12: &'static [Among<Context>; 7] = &[
    Among("\u{03C3}\u{03B5}", -1, 1, None),
    Among(
        "\u{03BC}\u{03B5}\u{03C4}\u{03B1}\u{03C3}\u{03B5}",
        0,
        1,
        None,
    ),
    Among(
        "\u{03BC}\u{03B9}\u{03BA}\u{03C1}\u{03BF}\u{03C3}\u{03B5}",
        0,
        1,
        None,
    ),
    Among("\u{03B5}\u{03B3}\u{03BA}\u{03BB}\u{03B5}", -1, 1, None),
    Among(
        "\u{03B1}\u{03C0}\u{03BF}\u{03BA}\u{03BB}\u{03B5}",
        -1,
        1,
        None,
    ),
    Among("\u{03B4}\u{03B1}\u{03BD}\u{03B5}", -1, 2, None),
    Among(
        "\u{03B1}\u{03BD}\u{03C4}\u{03B9}\u{03B4}\u{03B1}\u{03BD}\u{03B5}",
        5,
        2,
        None,
    ),
];

static A_13: &'static [Among<Context>; 10] = &[
    Among("\u{03C4}\u{03BF}\u{03C0}\u{03B9}\u{03BA}", -1, 7, None),
    Among(
        "\u{03C3}\u{03BA}\u{03B5}\u{03C0}\u{03C4}\u{03B9}\u{03BA}",
        -1,
        6,
        None,
    ),
    Among(
        "\u{03B3}\u{03BD}\u{03C9}\u{03C3}\u{03C4}\u{03B9}\u{03BA}",
        -1,
        3,
        None,
    ),
    Among(
        "\u{03B1}\u{03B3}\u{03BD}\u{03C9}\u{03C3}\u{03C4}\u{03B9}\u{03BA}",
        2,
        1,
        None,
    ),
    Among(
        "\u{03B5}\u{03BA}\u{03BB}\u{03B5}\u{03BA}\u{03C4}\u{03B9}\u{03BA}",
        -1,
        5,
        None,
    ),
    Among(
        "\u{03B1}\u{03C4}\u{03BF}\u{03BC}\u{03B9}\u{03BA}",
        -1,
        2,
        None,
    ),
    Among("\u{03B5}\u{03B8}\u{03BD}\u{03B9}\u{03BA}", -1, 4, None),
    Among(
        "\u{03B8}\u{03B5}\u{03B1}\u{03C4}\u{03C1}\u{03B9}\u{03BD}",
        -1,
        10,
        None,
    ),
    Among(
        "\u{03B1}\u{03BB}\u{03B5}\u{03BE}\u{03B1}\u{03BD}\u{03B4}\u{03C1}\u{03B9}\u{03BD}",
        -1,
        8,
        None,
    ),
    Among(
        "\u{03B2}\u{03C5}\u{03B6}\u{03B1}\u{03BD}\u{03C4}\u{03B9}\u{03BD}",
        -1,
        9,
        None,
    ),
];

static A_14: &'static [Among<Context>; 6] = &[
    Among(
        "\u{03B9}\u{03C3}\u{03BC}\u{03BF}\u{03C5}\u{03C3}",
        -1,
        1,
        None,
    ),
    Among("\u{03B9}\u{03C3}\u{03BC}\u{03BF}\u{03C3}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03BC}\u{03BF}\u{03C5}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03BC}\u{03BF}\u{03B9}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03BC}\u{03C9}\u{03BD}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03BC}\u{03BF}", -1, 1, None),
];

static A_15: &'static [Among<Context>; 2] = &[
    Among("\u{03C3}", -1, 1, None),
    Among("\u{03C7}", -1, 1, None),
];

static A_16: &'static [Among<Context>; 4] = &[
    Among(
        "\u{03B1}\u{03C1}\u{03B1}\u{03BA}\u{03B9}\u{03B1}",
        -1,
        1,
        None,
    ),
    Among(
        "\u{03BF}\u{03C5}\u{03B4}\u{03B1}\u{03BA}\u{03B9}\u{03B1}",
        -1,
        1,
        None,
    ),
    Among("\u{03B1}\u{03C1}\u{03B1}\u{03BA}\u{03B9}", -1, 1, None),
    Among(
        "\u{03BF}\u{03C5}\u{03B4}\u{03B1}\u{03BA}\u{03B9}",
        -1,
        1,
        None,
    ),
];

static A_17: &'static [Among<Context>; 46] = &[
    Among("\u{03C0}", -1, 2, None),
    Among(
        "\u{03BA}\u{03B1}\u{03C4}\u{03C1}\u{03B1}\u{03C0}",
        0,
        1,
        None,
    ),
    Among("\u{03C1}", -1, 1, None),
    Among("\u{03B2}\u{03C1}", 2, 1, None),
    Among("\u{03BB}\u{03B1}\u{03B2}\u{03C1}", 3, 1, None),
    Among("\u{03B1}\u{03BC}\u{03B2}\u{03C1}", 3, 1, None),
    Among("\u{03C0}\u{03B1}\u{03C4}\u{03B5}\u{03C1}", 2, 2, None),
    Among("\u{03BC}\u{03B5}\u{03C1}", 2, 1, None),
    Among("\u{03B1}\u{03BD}\u{03B8}\u{03C1}", 2, 1, None),
    Among("\u{03BA}\u{03BF}\u{03C1}", 2, 1, None),
    Among("\u{03C3}", -1, 1, None),
    Among(
        "\u{03BD}\u{03B1}\u{03B3}\u{03BA}\u{03B1}\u{03C3}",
        10,
        1,
        None,
    ),
    Among("\u{03C4}\u{03BF}\u{03C3}", 10, 2, None),
    Among("\u{03BC}\u{03BF}\u{03C5}\u{03C3}\u{03C4}", -1, 1, None),
    Among("\u{03C1}\u{03C5}", -1, 1, None),
    Among("\u{03C6}", -1, 1, None),
    Among("\u{03C3}\u{03C6}", 15, 1, None),
    Among("\u{03B1}\u{03BB}\u{03B9}\u{03C3}\u{03C6}", 16, 1, None),
    Among("\u{03BD}\u{03C5}\u{03C6}", 15, 2, None),
    Among("\u{03C7}", -1, 1, None),
    Among("\u{03B2}", -1, 2, None),
    Among("\u{03B2}\u{03B1}\u{03BC}\u{03B2}", 20, 1, None),
    Among("\u{03C3}\u{03BB}\u{03BF}\u{03B2}", 20, 1, None),
    Among(
        "\u{03C4}\u{03C3}\u{03B5}\u{03C7}\u{03BF}\u{03C3}\u{03BB}\u{03BF}\u{03B2}",
        22,
        1,
        None,
    ),
    Among("\u{03BA}\u{03B1}\u{03C1}\u{03B4}", -1, 2, None),
    Among("\u{03B6}", -1, 2, None),
    Among("\u{03C4}\u{03B6}", 25, 1, None),
    Among("\u{03BA}", -1, 1, None),
    Among("\u{03C3}\u{03BA}", 27, 1, None),
    Among("\u{03BA}\u{03B1}\u{03C0}\u{03B1}\u{03BA}", 27, 1, None),
    Among("\u{03C3}\u{03BF}\u{03BA}", 27, 1, None),
    Among("\u{03C0}\u{03BB}", -1, 1, None),
    Among("\u{03C6}\u{03C5}\u{03BB}", -1, 1, None),
    Among("\u{03BB}\u{03BF}\u{03C5}\u{03BB}", -1, 1, None),
    Among("\u{03B2}\u{03B1}\u{03BB}", -1, 2, None),
    Among("\u{03BC}\u{03B1}\u{03BB}", -1, 1, None),
    Among("\u{03B3}\u{03BB}", -1, 2, None),
    Among(
        "\u{03C4}\u{03C1}\u{03B9}\u{03C0}\u{03BF}\u{03BB}",
        -1,
        2,
        None,
    ),
    Among("\u{03C6}\u{03B1}\u{03C1}\u{03BC}", -1, 1, None),
    Among("\u{03BA}\u{03B1}\u{03B9}\u{03BC}", -1, 1, None),
    Among("\u{03BA}\u{03BB}\u{03B9}\u{03BC}", -1, 1, None),
    Among(
        "\u{03BC}\u{03B1}\u{03BA}\u{03C1}\u{03C5}\u{03BD}",
        -1,
        2,
        None,
    ),
    Among("\u{03C3}\u{03C0}\u{03B1}\u{03BD}", -1, 1, None),
    Among("\u{03B3}\u{03B9}\u{03B1}\u{03BD}", -1, 2, None),
    Among(
        "\u{03B7}\u{03B3}\u{03BF}\u{03C5}\u{03BC}\u{03B5}\u{03BD}",
        -1,
        2,
        None,
    ),
    Among("\u{03BA}\u{03BF}\u{03BD}", -1, 1, None),
];

static A_18: &'static [Among<Context>; 8] = &[
    Among("\u{03B9}\u{03C4}\u{03C3}\u{03B1}\u{03C3}", -1, 1, None),
    Among("\u{03B9}\u{03C4}\u{03C3}\u{03B5}\u{03C3}", -1, 1, None),
    Among("\u{03B9}\u{03C4}\u{03C3}\u{03B1}", -1, 1, None),
    Among("\u{03B1}\u{03BA}\u{03B9}\u{03B1}", -1, 1, None),
    Among(
        "\u{03B1}\u{03C1}\u{03B1}\u{03BA}\u{03B9}\u{03B1}",
        3,
        1,
        None,
    ),
    Among("\u{03B1}\u{03BA}\u{03B9}", -1, 1, None),
    Among("\u{03B1}\u{03C1}\u{03B1}\u{03BA}\u{03B9}", 5, 1, None),
    Among("\u{03B9}\u{03C4}\u{03C3}\u{03C9}\u{03BD}", -1, 1, None),
];

static A_19: &'static [Among<Context>; 4] = &[
    Among("\u{03B9}\u{03C1}", -1, 1, None),
    Among("\u{03C8}\u{03B1}\u{03BB}", -1, 1, None),
    Among("\u{03B1}\u{03B9}\u{03C6}\u{03BD}", -1, 1, None),
    Among("\u{03BF}\u{03BB}\u{03BF}", -1, 1, None),
];

static A_20: &'static [Among<Context>; 2] = &[
    Among("\u{03B5}", -1, 1, None),
    Among("\u{03C0}\u{03B1}\u{03B9}\u{03C7}\u{03BD}", -1, 1, None),
];

static A_21: &'static [Among<Context>; 3] = &[
    Among("\u{03B9}\u{03B4}\u{03B9}\u{03B1}", -1, 1, None),
    Among("\u{03B9}\u{03B4}\u{03B9}\u{03C9}\u{03BD}", -1, 1, None),
    Among("\u{03B9}\u{03B4}\u{03B9}\u{03BF}", -1, 1, None),
];

static A_22: &'static [Among<Context>; 7] = &[
    Among("\u{03C1}", -1, 1, None),
    Among("\u{03B9}\u{03B2}", -1, 1, None),
    Among("\u{03B4}", -1, 1, None),
    Among("\u{03BB}\u{03C5}\u{03BA}", -1, 1, None),
    Among("\u{03C6}\u{03C1}\u{03B1}\u{03B3}\u{03BA}", -1, 1, None),
    Among("\u{03BF}\u{03B2}\u{03B5}\u{03BB}", -1, 1, None),
    Among("\u{03BC}\u{03B7}\u{03BD}", -1, 1, None),
];

static A_23: &'static [Among<Context>; 4] = &[
    Among("\u{03B9}\u{03C3}\u{03BA}\u{03BF}\u{03C3}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03BA}\u{03BF}\u{03C5}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03BA}\u{03B5}", -1, 1, None),
    Among("\u{03B9}\u{03C3}\u{03BA}\u{03BF}", -1, 1, None),
];

static A_24: &'static [Among<Context>; 2] = &[
    Among("\u{03B1}\u{03B4}\u{03B5}\u{03C3}", -1, 1, None),
    Among("\u{03B1}\u{03B4}\u{03C9}\u{03BD}", -1, 1, None),
];

static A_25: &'static [Among<Context>; 10] = &[
    Among("\u{03BC}\u{03C0}\u{03B1}\u{03BC}\u{03C0}", -1, -1, None),
    Among("\u{03BA}\u{03C5}\u{03C1}", -1, -1, None),
    Among("\u{03C0}\u{03B1}\u{03C4}\u{03B5}\u{03C1}", -1, -1, None),
    Among("\u{03C0}\u{03B5}\u{03B8}\u{03B5}\u{03C1}", -1, -1, None),
    Among("\u{03BD}\u{03C4}\u{03B1}\u{03BD}\u{03C4}", -1, -1, None),
    Among("\u{03B3}\u{03B9}\u{03B1}\u{03B3}\u{03B9}", -1, -1, None),
    Among("\u{03B8}\u{03B5}\u{03B9}", -1, -1, None),
    Among("\u{03BF}\u{03BA}", -1, -1, None),
    Among("\u{03BC}\u{03B1}\u{03BC}", -1, -1, None),
    Among("\u{03BC}\u{03B1}\u{03BD}", -1, -1, None),
];

static A_26: &'static [Among<Context>; 2] = &[
    Among("\u{03B5}\u{03B4}\u{03B5}\u{03C3}", -1, 1, None),
    Among("\u{03B5}\u{03B4}\u{03C9}\u{03BD}", -1, 1, None),
];

static A_27: &'static [Among<Context>; 8] = &[
    Among("\u{03BA}\u{03C1}\u{03B1}\u{03C3}\u{03C0}", -1, 1, None),
    Among("\u{03C5}\u{03C0}", -1, 1, None),
    Among("\u{03B4}\u{03B1}\u{03C0}", -1, 1, None),
    Among("\u{03B3}\u{03B7}\u{03C0}", -1, 1, None),
    Among("\u{03B9}\u{03C0}", -1, 1, None),
    Among("\u{03B5}\u{03BC}\u{03C0}", -1, 1, None),
    Among("\u{03BF}\u{03C0}", -1, 1, None),
    Among("\u{03BC}\u{03B9}\u{03BB}", -1, 1, None),
];

static A_28: &'static [Among<Context>; 2] = &[
    Among("\u{03BF}\u{03C5}\u{03B4}\u{03B5}\u{03C3}", -1, 1, None),
    Among("\u{03BF}\u{03C5}\u{03B4}\u{03C9}\u{03BD}", -1, 1, None),
];

static A_29: &'static [Among<Context>; 15] = &[
    Among("\u{03C3}\u{03C0}", -1, 1, None),
    Among("\u{03C6}\u{03C1}", -1, 1, None),
    Among("\u{03C3}", -1, 1, None),
    Among("\u{03BB}\u{03B9}\u{03C7}", -1, 1, None),
    Among("\u{03C4}\u{03C1}\u{03B1}\u{03B3}", -1, 1, None),
    Among("\u{03C6}\u{03B5}", -1, 1, None),
    Among("\u{03B1}\u{03C1}\u{03BA}", -1, 1, None),
    Among("\u{03C3}\u{03BA}", -1, 1, None),
    Among(
        "\u{03BA}\u{03B1}\u{03BB}\u{03B9}\u{03B1}\u{03BA}",
        -1,
        1,
        None,
    ),
    Among("\u{03BB}\u{03BF}\u{03C5}\u{03BB}", -1, 1, None),
    Among("\u{03C6}\u{03BB}", -1, 1, None),
    Among("\u{03C0}\u{03B5}\u{03C4}\u{03B1}\u{03BB}", -1, 1, None),
    Among("\u{03B2}\u{03B5}\u{03BB}", -1, 1, None),
    Among("\u{03C7}\u{03BD}", -1, 1, None),
    Among("\u{03C0}\u{03BB}\u{03B5}\u{03BE}", -1, 1, None),
];

static A_30: &'static [Among<Context>; 2] = &[
    Among("\u{03B5}\u{03C9}\u{03C3}", -1, 1, None),
    Among("\u{03B5}\u{03C9}\u{03BD}", -1, 1, None),
];

static A_31: &'static [Among<Context>; 8] = &[
    Among("\u{03C0}", -1, 1, None),
    Among("\u{03C0}\u{03B1}\u{03C1}", -1, 1, None),
    Among("\u{03B4}", -1, 1, None),
    Among("\u{03B9}\u{03B4}", 2, 1, None),
    Among("\u{03B8}", -1, 1, None),
    Among("\u{03B3}\u{03B1}\u{03BB}", -1, 1, None),
    Among("\u{03B5}\u{03BB}", -1, 1, None),
    Among("\u{03BD}", -1, 1, None),
];

static A_32: &'static [Among<Context>; 3] = &[
    Among("\u{03B9}\u{03BF}\u{03C5}", -1, 1, None),
    Among("\u{03B9}\u{03B1}", -1, 1, None),
    Among("\u{03B9}\u{03C9}\u{03BD}", -1, 1, None),
];

static A_33: &'static [Among<Context>; 4] = &[
    Among("\u{03B9}\u{03BA}\u{03BF}\u{03C5}", -1, 1, None),
    Among("\u{03B9}\u{03BA}\u{03B1}", -1, 1, None),
    Among("\u{03B9}\u{03BA}\u{03C9}\u{03BD}", -1, 1, None),
    Among("\u{03B9}\u{03BA}\u{03BF}", -1, 1, None),
];

static A_34: &'static [Among<Context>; 36] = &[
    Among("\u{03BA}\u{03B1}\u{03BB}\u{03C0}", -1, 1, None),
    Among("\u{03B3}\u{03B5}\u{03C1}", -1, 1, None),
    Among(
        "\u{03C0}\u{03BB}\u{03B9}\u{03B1}\u{03C4}\u{03C3}",
        -1,
        1,
        None,
    ),
    Among("\u{03C0}\u{03B5}\u{03C4}\u{03C3}", -1, 1, None),
    Among("\u{03C0}\u{03B9}\u{03C4}\u{03C3}", -1, 1, None),
    Among("\u{03C6}\u{03C5}\u{03C3}", -1, 1, None),
    Among("\u{03C7}\u{03B1}\u{03C3}", -1, 1, None),
    Among("\u{03BC}\u{03C0}\u{03BF}\u{03C3}", -1, 1, None),
    Among("\u{03C3}\u{03B5}\u{03C1}\u{03C4}", -1, 1, None),
    Among(
        "\u{03BC}\u{03C0}\u{03B1}\u{03B3}\u{03B9}\u{03B1}\u{03C4}",
        -1,
        1,
        None,
    ),
    Among("\u{03BD}\u{03B9}\u{03C4}", -1, 1, None),
    Among(
        "\u{03C0}\u{03B9}\u{03BA}\u{03B1}\u{03BD}\u{03C4}",
        -1,
        1,
        None,
    ),
    Among("\u{03B5}\u{03BE}\u{03C9}\u{03B4}", -1, 1, None),
    Among("\u{03B1}\u{03B4}", -1, 1, None),
    Among("\u{03BA}\u{03B1}\u{03C4}\u{03B1}\u{03B4}", 13, 1, None),
    Among("\u{03C3}\u{03C5}\u{03BD}\u{03B1}\u{03B4}", 13, 1, None),
    Among("\u{03B1}\u{03BD}\u{03C4}\u{03B9}\u{03B4}", -1, 1, None),
    Among("\u{03B5}\u{03BD}\u{03B4}", -1, 1, None),
    Among("\u{03C5}\u{03C0}\u{03BF}\u{03B4}", -1, 1, None),
    Among(
        "\u{03C0}\u{03C1}\u{03C9}\u{03C4}\u{03BF}\u{03B4}",
        -1,
        1,
        None,
    ),
    Among("\u{03C6}\u{03C5}\u{03BB}\u{03BF}\u{03B4}", -1, 1, None),
    Among("\u{03B7}\u{03B8}", -1, 1, None),
    Among("\u{03B1}\u{03BD}\u{03B7}\u{03B8}", 21, 1, None),
    Among("\u{03BE}\u{03B9}\u{03BA}", -1, 1, None),
    Among("\u{03BC}\u{03BF}\u{03C5}\u{03BB}", -1, 1, None),
    Among("\u{03B1}\u{03BB}", -1, 1, None),
    Among(
        "\u{03B1}\u{03BC}\u{03BC}\u{03BF}\u{03C7}\u{03B1}\u{03BB}",
        25,
        1,
        None,
    ),
    Among(
        "\u{03C3}\u{03C5}\u{03BD}\u{03BF}\u{03BC}\u{03B7}\u{03BB}",
        -1,
        1,
        None,
    ),
    Among("\u{03BC}\u{03C0}\u{03BF}\u{03BB}", -1, 1, None),
    Among("\u{03B2}\u{03C1}\u{03C9}\u{03BC}", -1, 1, None),
    Among("\u{03C4}\u{03C3}\u{03B1}\u{03BC}", -1, 1, None),
    Among("\u{03BC}\u{03C0}\u{03B1}\u{03BD}", -1, 1, None),
    Among("\u{03B1}\u{03BC}\u{03B1}\u{03BD}", -1, 1, None),
    Among(
        "\u{03BA}\u{03B1}\u{03BB}\u{03BB}\u{03B9}\u{03BD}",
        -1,
        1,
        None,
    ),
    Among(
        "\u{03C0}\u{03BF}\u{03C3}\u{03C4}\u{03B5}\u{03BB}\u{03BD}",
        -1,
        1,
        None,
    ),
    Among("\u{03C6}\u{03B9}\u{03BB}\u{03BF}\u{03BD}", -1, 1, None),
];

static A_35: &'static [Among<Context>; 5] = &[
    Among(
        "\u{03BF}\u{03C5}\u{03C3}\u{03B1}\u{03BC}\u{03B5}",
        -1,
        1,
        None,
    ),
    Among("\u{03B7}\u{03C3}\u{03B1}\u{03BC}\u{03B5}", -1, 1, None),
    Among("\u{03B1}\u{03B3}\u{03B1}\u{03BC}\u{03B5}", -1, 1, None),
    Among("\u{03B7}\u{03BA}\u{03B1}\u{03BC}\u{03B5}", -1, 1, None),
    Among(
        "\u{03B7}\u{03B8}\u{03B7}\u{03BA}\u{03B1}\u{03BC}\u{03B5}",
        3,
        1,
        None,
    ),
];

static A_36: &'static [Among<Context>; 12] = &[
    Among("\u{03B1}\u{03BD}\u{03B1}\u{03C0}", -1, 1, None),
    Among("\u{03C0}\u{03B9}\u{03BA}\u{03C1}", -1, 1, None),
    Among("\u{03B1}\u{03C0}\u{03BF}\u{03C3}\u{03C4}", -1, 1, None),
    Among("\u{03C0}\u{03BF}\u{03C4}", -1, 1, None),
    Among("\u{03C7}", -1, 1, None),
    Among("\u{03C3}\u{03B9}\u{03C7}", 4, 1, None),
    Among("\u{03B2}\u{03BF}\u{03C5}\u{03B2}", -1, 1, None),
    Among("\u{03C0}\u{03B5}\u{03B8}", -1, 1, None),
    Among("\u{03BE}\u{03B5}\u{03B8}", -1, 1, None),
    Among("\u{03B1}\u{03C0}\u{03BF}\u{03B8}", -1, 1, None),
    Among("\u{03B1}\u{03C0}\u{03BF}\u{03BA}", -1, 1, None),
    Among("\u{03BF}\u{03C5}\u{03BB}", -1, 1, None),
];

static A_37: &'static [Among<Context>; 2] = &[
    Among("\u{03C4}\u{03C1}", -1, 1, None),
    Among("\u{03C4}\u{03C3}", -1, 1, None),
];

static A_38: &'static [Among<Context>; 11] = &[
    Among(
        "\u{03BF}\u{03C5}\u{03C3}\u{03B1}\u{03BD}\u{03B5}",
        -1,
        1,
        None,
    ),
    Among("\u{03B7}\u{03C3}\u{03B1}\u{03BD}\u{03B5}", -1, 1, None),
    Among(
        "\u{03BF}\u{03C5}\u{03BD}\u{03C4}\u{03B1}\u{03BD}\u{03B5}",
        -1,
        1,
        None,
    ),
    Among(
        "\u{03B9}\u{03BF}\u{03C5}\u{03BD}\u{03C4}\u{03B1}\u{03BD}\u{03B5}",
        2,
        1,
        None,
    ),
    Among(
        "\u{03BF}\u{03BD}\u{03C4}\u{03B1}\u{03BD}\u{03B5}",
        -1,
        1,
        None,
    ),
    Among(
        "\u{03B9}\u{03BF}\u{03BD}\u{03C4}\u{03B1}\u{03BD}\u{03B5}",
        4,
        1,
        None,
    ),
    Among("\u{03BF}\u{03C4}\u{03B1}\u{03BD}\u{03B5}", -1, 1, None),
    Among(
        "\u{03B9}\u{03BF}\u{03C4}\u{03B1}\u{03BD}\u{03B5}",
        6,
        1,
        None,
    ),
    Among("\u{03B1}\u{03B3}\u{03B1}\u{03BD}\u{03B5}", -1, 1, None),
    Among("\u{03B7}\u{03BA}\u{03B1}\u{03BD}\u{03B5}", -1, 1, None),
    Among(
        "\u{03B7}\u{03B8}\u{03B7}\u{03BA}\u{03B1}\u{03BD}\u{03B5}",
        9,
        1,
        None,
    ),
];

static A_39: &'static [Among<Context>; 95] = &[
    Among("\u{03C0}", -1, 1, None),
    Among("\u{03C3}\u{03C0}", 0, 1, None),
    Among(
        "\u{03C0}\u{03BF}\u{03BB}\u{03C5}\u{03B4}\u{03B1}\u{03C0}",
        0,
        1,
        None,
    ),
    Among("\u{03B1}\u{03B4}\u{03B1}\u{03C0}", 0, 1, None),
    Among(
        "\u{03C7}\u{03B1}\u{03BC}\u{03B7}\u{03BB}\u{03BF}\u{03B4}\u{03B1}\u{03C0}",
        0,
        1,
        None,
    ),
    Among("\u{03C4}\u{03C3}\u{03BF}\u{03C0}", 0, 1, None),
    Among("\u{03BA}\u{03BF}\u{03C0}", 0, 1, None),
    Among(
        "\u{03C5}\u{03C0}\u{03BF}\u{03BA}\u{03BF}\u{03C0}",
        6,
        1,
        None,
    ),
    Among(
        "\u{03C0}\u{03B5}\u{03C1}\u{03B9}\u{03C4}\u{03C1}",
        -1,
        1,
        None,
    ),
    Among("\u{03BF}\u{03C5}\u{03C1}", -1, 1, None),
    Among("\u{03B5}\u{03C1}", -1, 1, None),
    Among("\u{03B2}\u{03B5}\u{03C4}\u{03B5}\u{03C1}", 10, 1, None),
    Among("\u{03B3}\u{03B5}\u{03C1}", 10, 1, None),
    Among(
        "\u{03BB}\u{03BF}\u{03C5}\u{03B8}\u{03B7}\u{03C1}",
        -1,
        1,
        None,
    ),
    Among(
        "\u{03BA}\u{03BF}\u{03C1}\u{03BC}\u{03BF}\u{03C1}",
        -1,
        1,
        None,
    ),
    Among("\u{03C3}", -1, 1, None),
    Among(
        "\u{03C3}\u{03B1}\u{03C1}\u{03B1}\u{03BA}\u{03B1}\u{03C4}\u{03C3}",
        15,
        1,
        None,
    ),
    Among("\u{03B8}\u{03C5}\u{03C3}", 15, 1, None),
    Among("\u{03B2}\u{03B1}\u{03C3}", 15, 1, None),
    Among("\u{03C0}\u{03BF}\u{03BB}\u{03B9}\u{03C3}", 15, 1, None),
    Among("\u{03BA}\u{03B1}\u{03C3}\u{03C4}", -1, 1, None),
    Among("\u{03B4}\u{03B9}\u{03B1}\u{03C4}", -1, 1, None),
    Among("\u{03C0}\u{03BB}\u{03B1}\u{03C4}", -1, 1, None),
    Among(
        "\u{03C4}\u{03C3}\u{03B1}\u{03C1}\u{03BB}\u{03B1}\u{03C4}",
        -1,
        1,
        None,
    ),
    Among("\u{03C4}\u{03B5}\u{03C4}", -1, 1, None),
    Among(
        "\u{03C0}\u{03BF}\u{03C5}\u{03C1}\u{03B9}\u{03C4}",
        -1,
        1,
        None,
    ),
    Among("\u{03C3}\u{03BF}\u{03C5}\u{03BB}\u{03C4}", -1, 1, None),
    Among("\u{03B6}\u{03C9}\u{03BD}\u{03C4}", -1, 1, None),
    Among("\u{03BC}\u{03B1}\u{03B9}\u{03BD}\u{03C4}", -1, 1, None),
    Among("\u{03C6}", -1, 1, None),
    Among(
        "\u{03C0}\u{03B5}\u{03BD}\u{03C4}\u{03B1}\u{03C1}\u{03C6}",
        29,
        1,
        None,
    ),
    Among(
        "\u{03BA}\u{03BF}\u{03B9}\u{03BB}\u{03B1}\u{03C1}\u{03C6}",
        29,
        1,
        None,
    ),
    Among("\u{03BF}\u{03C1}\u{03C6}", 29, 1, None),
    Among("\u{03B4}\u{03B9}\u{03B1}\u{03C6}", 29, 1, None),
    Among("\u{03C3}\u{03C4}\u{03B5}\u{03C6}", 29, 1, None),
    Among(
        "\u{03C6}\u{03C9}\u{03C4}\u{03BF}\u{03C3}\u{03C4}\u{03B5}\u{03C6}",
        34,
        1,
        None,
    ),
    Among("\u{03C0}\u{03B5}\u{03C1}\u{03B7}\u{03C6}", 29, 1, None),
    Among(
        "\u{03C5}\u{03C0}\u{03B5}\u{03C1}\u{03B7}\u{03C6}",
        36,
        1,
        None,
    ),
    Among("\u{03C7}", -1, 1, None),
    Among(
        "\u{03C0}\u{03BF}\u{03BB}\u{03C5}\u{03BC}\u{03B7}\u{03C7}",
        38,
        1,
        None,
    ),
    Among("\u{03B1}\u{03BC}\u{03B7}\u{03C7}", 38, 1, None),
    Among(
        "\u{03B2}\u{03B9}\u{03BF}\u{03BC}\u{03B7}\u{03C7}",
        38,
        1,
        None,
    ),
    Among(
        "\u{03BC}\u{03B9}\u{03BA}\u{03C1}\u{03BF}\u{03B2}\u{03B9}\u{03BF}\u{03BC}\u{03B7}\u{03C7}",
        41,
        1,
        None,
    ),
    Among(
        "\u{03BC}\u{03B5}\u{03B3}\u{03BB}\u{03BF}\u{03B2}\u{03B9}\u{03BF}\u{03BC}\u{03B7}\u{03C7}",
        41,
        1,
        None,
    ),
    Among(
        "\u{03BA}\u{03B1}\u{03C0}\u{03BD}\u{03BF}\u{03B2}\u{03B9}\u{03BF}\u{03BC}\u{03B7}\u{03C7}",
        41,
        1,
        None,
    ),
    Among("\u{03BB}\u{03B9}\u{03C7}", 38, 1, None),
    Among("\u{03C4}\u{03B1}\u{03B2}", -1, 1, None),
    Among("\u{03BD}\u{03C4}\u{03B1}\u{03B2}", 46, 1, None),
    Among(
        "\u{03C8}\u{03B7}\u{03BB}\u{03BF}\u{03C4}\u{03B1}\u{03B2}",
        46,
        1,
        None,
    ),
    Among("\u{03BB}\u{03B9}\u{03B2}", -1, 1, None),
    Among("\u{03BA}\u{03BB}\u{03B9}\u{03B2}", 49, 1, None),
    Among(
        "\u{03BE}\u{03B7}\u{03C1}\u{03BF}\u{03BA}\u{03BB}\u{03B9}\u{03B2}",
        50,
        1,
        None,
    ),
    Among("\u{03B3}", -1, 1, None),
    Among("\u{03B1}\u{03BD}\u{03BF}\u{03C1}\u{03B3}", 52, 1, None),
    Among("\u{03B5}\u{03BD}\u{03BF}\u{03C1}\u{03B3}", 52, 1, None),
    Among("\u{03B1}\u{03B3}", 52, 1, None),
    Among("\u{03C4}\u{03C1}\u{03B1}\u{03B3}", 55, 1, None),
    Among("\u{03C4}\u{03C3}\u{03B1}\u{03B3}", 55, 1, None),
    Among("\u{03C4}\u{03C3}\u{03B9}\u{03B3}\u{03B3}", 52, 1, None),
    Among(
        "\u{03B1}\u{03C4}\u{03C3}\u{03B9}\u{03B3}\u{03B3}",
        58,
        1,
        None,
    ),
    Among("\u{03B1}\u{03B8}\u{03B9}\u{03B3}\u{03B3}", 52, 1, None),
    Among("\u{03C3}\u{03C4}\u{03B5}\u{03B3}", 52, 1, None),
    Among("\u{03B1}\u{03C0}\u{03B7}\u{03B3}", 52, 1, None),
    Among("\u{03C3}\u{03B9}\u{03B3}", 52, 1, None),
    Among(
        "\u{03BA}\u{03B1}\u{03BB}\u{03C0}\u{03BF}\u{03C5}\u{03B6}",
        -1,
        1,
        None,
    ),
    Among("\u{03B8}", -1, 1, None),
    Among(
        "\u{03BC}\u{03C9}\u{03B1}\u{03BC}\u{03B5}\u{03B8}",
        65,
        1,
        None,
    ),
    Among("\u{03C0}\u{03B9}\u{03B8}", 65, 1, None),
    Among("\u{03B1}\u{03C0}\u{03B9}\u{03B8}", 67, 1, None),
    Among("\u{03B2}\u{03B1}\u{03C3}\u{03BA}", -1, 1, None),
    Among(
        "\u{03B2}\u{03C1}\u{03B1}\u{03C7}\u{03C5}\u{03BA}",
        -1,
        1,
        None,
    ),
    Among("\u{03B4}\u{03B5}\u{03BA}", -1, 1, None),
    Among("\u{03C0}\u{03B5}\u{03BB}\u{03B5}\u{03BA}", -1, 1, None),
    Among("\u{03B9}\u{03BA}", -1, 1, None),
    Among("\u{03B1}\u{03BD}\u{03B9}\u{03BA}", 73, 1, None),
    Among("\u{03B2}\u{03BF}\u{03C5}\u{03BB}\u{03BA}", -1, 1, None),
    Among("\u{03C0}\u{03BB}", -1, 1, None),
    Among("\u{03B4}\u{03B9}\u{03C0}\u{03BB}", 76, 1, None),
    Among(
        "\u{03C8}\u{03C5}\u{03C7}\u{03BF}\u{03C0}\u{03BB}",
        76,
        1,
        None,
    ),
    Among("\u{03BB}\u{03B1}\u{03BF}\u{03C0}\u{03BB}", 76, 1, None),
    Among("\u{03BF}\u{03C5}\u{03BB}", -1, 1, None),
    Among("\u{03B3}\u{03B1}\u{03BB}", -1, 1, None),
    Among(
        "\u{03B2}\u{03B1}\u{03B8}\u{03C5}\u{03B3}\u{03B1}\u{03BB}",
        81,
        1,
        None,
    ),
    Among(
        "\u{03BA}\u{03B1}\u{03C4}\u{03B1}\u{03B3}\u{03B1}\u{03BB}",
        81,
        1,
        None,
    ),
    Among(
        "\u{03BF}\u{03BB}\u{03BF}\u{03B3}\u{03B1}\u{03BB}",
        81,
        1,
        None,
    ),
    Among(
        "\u{03BA}\u{03B1}\u{03C3}\u{03C4}\u{03B5}\u{03BB}",
        -1,
        1,
        None,
    ),
    Among("\u{03BC}\u{03B5}\u{03BB}", -1, 1, None),
    Among(
        "\u{03C0}\u{03BF}\u{03C1}\u{03C4}\u{03BF}\u{03BB}",
        -1,
        1,
        None,
    ),
    Among("\u{03BC}", -1, 1, None),
    Among(
        "\u{03B4}\u{03C1}\u{03B1}\u{03B4}\u{03BF}\u{03C5}\u{03BC}",
        88,
        1,
        None,
    ),
    Among("\u{03B2}\u{03C1}\u{03B1}\u{03C7}\u{03BC}", 88, 1, None),
    Among(
        "\u{03BF}\u{03BB}\u{03B9}\u{03B3}\u{03BF}\u{03B4}\u{03B1}\u{03BC}",
        88,
        1,
        None,
    ),
    Among(
        "\u{03BC}\u{03BF}\u{03C5}\u{03C3}\u{03BF}\u{03C5}\u{03BB}\u{03BC}",
        88,
        1,
        None,
    ),
    Among("\u{03BD}", -1, 1, None),
    Among(
        "\u{03B1}\u{03BC}\u{03B5}\u{03C1}\u{03B9}\u{03BA}\u{03B1}\u{03BD}",
        93,
        1,
        None,
    ),
];

static A_40: &'static [Among<Context>; 1] = &[Among(
    "\u{03B7}\u{03C3}\u{03B5}\u{03C4}\u{03B5}",
    -1,
    1,
    None,
)];

static A_41: &'static [Among<Context>; 31] = &[
    Among("\u{03C0}\u{03C5}\u{03C1}", -1, 1, None),
    Among("\u{03B5}\u{03C5}\u{03C1}", -1, 1, None),
    Among("\u{03C7}\u{03C9}\u{03C1}", -1, 1, None),
    Among("\u{03B2}\u{03B1}\u{03C1}", -1, 1, None),
    Among("\u{03B2}\u{03C1}", -1, 1, None),
    Among("\u{03B1}\u{03B9}\u{03C1}", -1, 1, None),
    Among("\u{03C6}\u{03BF}\u{03C1}", -1, 1, None),
    Among("\u{03BD}\u{03B5}\u{03C4}", -1, 1, None),
    Among("\u{03C3}\u{03C7}", -1, 1, None),
    Among("\u{03C3}\u{03C5}\u{03BD}\u{03B4}", -1, 1, None),
    Among("\u{03B5}\u{03BD}\u{03B4}", -1, 1, None),
    Among("\u{03BF}\u{03B4}", -1, 1, None),
    Among("\u{03C5}\u{03C0}\u{03B5}\u{03C1}\u{03B8}", -1, 1, None),
    Among("\u{03C3}\u{03B8}", -1, 1, None),
    Among("\u{03B5}\u{03C5}\u{03B8}", -1, 1, None),
    Among("\u{03C1}\u{03B1}\u{03B8}", -1, 1, None),
    Among("\u{03C4}\u{03B1}\u{03B8}", -1, 1, None),
    Among("\u{03B4}\u{03B9}\u{03B1}\u{03B8}", -1, 1, None),
    Among("\u{03BA}\u{03B1}\u{03B8}", -1, 1, None),
    Among("\u{03C4}\u{03B9}\u{03B8}", -1, 1, None),
    Among("\u{03B5}\u{03BA}\u{03B8}", -1, 1, None),
    Among("\u{03C3}\u{03C5}\u{03BD}\u{03B8}", -1, 1, None),
    Among("\u{03B5}\u{03BD}\u{03B8}", -1, 1, None),
    Among("\u{03C1}\u{03BF}\u{03B8}", -1, 1, None),
    Among("\u{03B1}\u{03C1}\u{03BA}", -1, 1, None),
    Among("\u{03C9}\u{03C6}\u{03B5}\u{03BB}", -1, 1, None),
    Among("\u{03B2}\u{03BF}\u{03BB}", -1, 1, None),
    Among("\u{03C3}\u{03C5}\u{03BD}", -1, 1, None),
    Among("\u{03B1}\u{03B9}\u{03BD}", -1, 1, None),
    Among("\u{03C0}\u{03BF}\u{03BD}", -1, 1, None),
    Among("\u{03C1}\u{03BF}\u{03BD}", -1, 1, None),
];

static A_42: &'static [Among<Context>; 25] = &[
    Among("\u{03C3}\u{03B5}\u{03C1}\u{03C0}", -1, 1, None),
    Among("\u{03BA}\u{03BF}\u{03C0}", -1, 1, None),
    Among("\u{03B8}\u{03B1}\u{03C1}\u{03C1}", -1, 1, None),
    Among("\u{03BD}\u{03C4}\u{03C1}", -1, 1, None),
    Among("\u{03B1}\u{03B2}\u{03B1}\u{03C1}", -1, 1, None),
    Among("\u{03B5}\u{03BD}\u{03B1}\u{03C1}", -1, 1, None),
    Among("\u{03B1}\u{03B2}\u{03C1}", -1, 1, None),
    Among("\u{03BC}\u{03C0}\u{03BF}\u{03C1}", -1, 1, None),
    Among("\u{03C5}", -1, 1, None),
    Among("\u{03C3}\u{03C5}\u{03C1}\u{03C6}", -1, 1, None),
    Among("\u{03BD}\u{03B9}\u{03C6}", -1, 1, None),
    Among("\u{03C0}\u{03B1}\u{03B3}", -1, 1, None),
    Among("\u{03B4}", -1, 1, None),
    Among("\u{03B1}\u{03B4}", 12, 1, None),
    Among("\u{03B8}", -1, 1, None),
    Among("\u{03B1}\u{03B8}", 14, 1, None),
    Among("\u{03C3}\u{03BA}", -1, 1, None),
    Among("\u{03C4}\u{03BF}\u{03BA}", -1, 1, None),
    Among("\u{03B1}\u{03C0}\u{03BB}", -1, 1, None),
    Among(
        "\u{03C0}\u{03B1}\u{03C1}\u{03B1}\u{03BA}\u{03B1}\u{03BB}",
        -1,
        1,
        None,
    ),
    Among("\u{03C3}\u{03BA}\u{03B5}\u{03BB}", -1, 1, None),
    Among("\u{03B5}\u{03BC}", -1, 1, None),
    Among("\u{03B1}\u{03BD}", -1, 1, None),
    Among("\u{03B2}\u{03B5}\u{03BD}", -1, 1, None),
    Among("\u{03B2}\u{03B1}\u{03C1}\u{03BF}\u{03BD}", -1, 1, None),
];

static A_43: &'static [Among<Context>; 2] = &[
    Among("\u{03C9}\u{03BD}\u{03C4}\u{03B1}\u{03C3}", -1, 1, None),
    Among("\u{03BF}\u{03BD}\u{03C4}\u{03B1}\u{03C3}", -1, 1, None),
];

static A_44: &'static [Among<Context>; 2] = &[
    Among(
        "\u{03BF}\u{03BC}\u{03B1}\u{03C3}\u{03C4}\u{03B5}",
        -1,
        1,
        None,
    ),
    Among(
        "\u{03B9}\u{03BF}\u{03BC}\u{03B1}\u{03C3}\u{03C4}\u{03B5}",
        0,
        1,
        None,
    ),
];

static A_45: &'static [Among<Context>; 6] = &[
    Among("\u{03C0}", -1, 1, None),
    Among("\u{03B1}\u{03C0}", 0, 1, None),
    Among(
        "\u{03B1}\u{03BA}\u{03B1}\u{03C4}\u{03B1}\u{03C0}",
        1,
        1,
        None,
    ),
    Among("\u{03C3}\u{03C5}\u{03BC}\u{03C0}", 0, 1, None),
    Among("\u{03B1}\u{03C3}\u{03C5}\u{03BC}\u{03C0}", 3, 1, None),
    Among(
        "\u{03B1}\u{03BC}\u{03B5}\u{03C4}\u{03B1}\u{03BC}\u{03C6}",
        -1,
        1,
        None,
    ),
];

static A_46: &'static [Among<Context>; 9] = &[
    Among("\u{03B1}\u{03C1}", -1, 1, None),
    Among("\u{03BD}\u{03B9}\u{03C3}", -1, 1, None),
    Among("\u{03B6}", -1, 1, None),
    Among("\u{03B1}\u{03BB}", -1, 1, None),
    Among(
        "\u{03C0}\u{03B1}\u{03C1}\u{03B1}\u{03BA}\u{03B1}\u{03BB}",
        3,
        1,
        None,
    ),
    Among("\u{03B5}\u{03BA}\u{03C4}\u{03B5}\u{03BB}", -1, 1, None),
    Among("\u{03BC}", -1, 1, None),
    Among("\u{03BE}", -1, 1, None),
    Among("\u{03C0}\u{03C1}\u{03BF}", -1, 1, None),
];

static A_47: &'static [Among<Context>; 3] = &[
    Among(
        "\u{03B7}\u{03B8}\u{03B7}\u{03BA}\u{03B5}\u{03C3}",
        -1,
        1,
        None,
    ),
    Among("\u{03B7}\u{03B8}\u{03B7}\u{03BA}\u{03B1}", -1, 1, None),
    Among("\u{03B7}\u{03B8}\u{03B7}\u{03BA}\u{03B5}", -1, 1, None),
];

static A_48: &'static [Among<Context>; 6] = &[
    Among("\u{03C3}\u{03C6}", -1, 1, None),
    Among("\u{03BD}\u{03B1}\u{03C1}\u{03B8}", -1, 1, None),
    Among("\u{03C0}\u{03B9}\u{03B8}", -1, 1, None),
    Among("\u{03BF}\u{03B8}", -1, 1, None),
    Among("\u{03C3}\u{03BA}\u{03BF}\u{03C5}\u{03BB}", -1, 1, None),
    Among("\u{03C3}\u{03BA}\u{03C9}\u{03BB}", -1, 1, None),
];

static A_49: &'static [Among<Context>; 5] = &[
    Among("\u{03B8}", -1, 1, None),
    Among("\u{03C0}\u{03C1}\u{03BF}\u{03C3}\u{03B8}", 0, 1, None),
    Among(
        "\u{03C0}\u{03B1}\u{03C1}\u{03B1}\u{03BA}\u{03B1}\u{03C4}\u{03B1}\u{03B8}",
        0,
        1,
        None,
    ),
    Among("\u{03B4}\u{03B9}\u{03B1}\u{03B8}", 0, 1, None),
    Among("\u{03C3}\u{03C5}\u{03BD}\u{03B8}", 0, 1, None),
];

static A_50: &'static [Among<Context>; 3] = &[
    Among("\u{03B7}\u{03BA}\u{03B5}\u{03C3}", -1, 1, None),
    Among("\u{03B7}\u{03BA}\u{03B1}", -1, 1, None),
    Among("\u{03B7}\u{03BA}\u{03B5}", -1, 1, None),
];

static A_51: &'static [Among<Context>; 12] = &[
    Among("\u{03B2}\u{03BB}\u{03B5}\u{03C0}", -1, 1, None),
    Among("\u{03C0}\u{03BF}\u{03B4}\u{03B1}\u{03C1}", -1, 1, None),
    Among("\u{03C0}\u{03C1}\u{03C9}\u{03C4}", -1, 1, None),
    Among("\u{03BA}\u{03C5}\u{03BC}\u{03B1}\u{03C4}", -1, 1, None),
    Among(
        "\u{03C0}\u{03B1}\u{03BD}\u{03C4}\u{03B1}\u{03C7}",
        -1,
        1,
        None,
    ),
    Among("\u{03BB}\u{03B1}\u{03C7}", -1, 1, None),
    Among("\u{03C6}\u{03B1}\u{03B3}", -1, 1, None),
    Among("\u{03BB}\u{03B7}\u{03B3}", -1, 1, None),
    Among("\u{03C6}\u{03C1}\u{03C5}\u{03B4}", -1, 1, None),
    Among(
        "\u{03BC}\u{03B1}\u{03BD}\u{03C4}\u{03B9}\u{03BB}",
        -1,
        1,
        None,
    ),
    Among("\u{03BC}\u{03B1}\u{03BB}\u{03BB}", -1, 1, None),
    Among("\u{03BF}\u{03BC}", -1, 1, None),
];

static A_52: &'static [Among<Context>; 25] = &[
    Among("\u{03B5}\u{03BA}\u{03BB}\u{03B9}\u{03C0}", -1, 1, None),
    Among("\u{03C1}", -1, 1, None),
    Among("\u{03B1}\u{03BD}\u{03B1}\u{03C1}\u{03C1}", 1, 1, None),
    Among(
        "\u{03B5}\u{03BD}\u{03B4}\u{03B9}\u{03B1}\u{03C6}\u{03B5}\u{03C1}",
        1,
        1,
        None,
    ),
    Among("\u{03C0}\u{03B1}\u{03C4}", -1, 1, None),
    Among(
        "\u{03BA}\u{03B1}\u{03B8}\u{03B1}\u{03C1}\u{03B5}\u{03C5}",
        -1,
        1,
        None,
    ),
    Among(
        "\u{03B4}\u{03B5}\u{03C5}\u{03C4}\u{03B5}\u{03C1}\u{03B5}\u{03C5}",
        -1,
        1,
        None,
    ),
    Among("\u{03BB}\u{03B5}\u{03C7}", -1, 1, None),
    Among("\u{03C4}\u{03C3}\u{03B1}", -1, 1, None),
    Among("\u{03C7}\u{03B1}\u{03B4}", -1, 1, None),
    Among("\u{03BC}\u{03B5}\u{03B4}", -1, 1, None),
    Among(
        "\u{03BB}\u{03B1}\u{03BC}\u{03C0}\u{03B9}\u{03B4}",
        -1,
        1,
        None,
    ),
    Among("\u{03B4}\u{03B5}", -1, 1, None),
    Among("\u{03C0}\u{03BB}\u{03B5}", -1, 1, None),
    Among("\u{03BC}\u{03B5}\u{03C3}\u{03B1}\u{03B6}", -1, 1, None),
    Among(
        "\u{03B4}\u{03B5}\u{03C3}\u{03C0}\u{03BF}\u{03B6}",
        -1,
        1,
        None,
    ),
    Among("\u{03B1}\u{03B9}\u{03B8}", -1, 1, None),
    Among(
        "\u{03C6}\u{03B1}\u{03C1}\u{03BC}\u{03B1}\u{03BA}",
        -1,
        1,
        None,
    ),
    Among("\u{03B1}\u{03B3}\u{03BA}", -1, 1, None),
    Among("\u{03B1}\u{03BD}\u{03B7}\u{03BA}", -1, 1, None),
    Among("\u{03BB}", -1, 1, None),
    Among("\u{03BC}", -1, 1, None),
    Among("\u{03B1}\u{03BC}", 21, 1, None),
    Among("\u{03B2}\u{03C1}\u{03BF}\u{03BC}", 21, 1, None),
    Among(
        "\u{03C5}\u{03C0}\u{03BF}\u{03C4}\u{03B5}\u{03B9}\u{03BD}",
        -1,
        1,
        None,
    ),
];

static A_53: &'static [Among<Context>; 3] = &[
    Among("\u{03BF}\u{03C5}\u{03C3}\u{03B5}\u{03C3}", -1, 1, None),
    Among("\u{03BF}\u{03C5}\u{03C3}\u{03B1}", -1, 1, None),
    Among("\u{03BF}\u{03C5}\u{03C3}\u{03B5}", -1, 1, None),
];

static A_54: &'static [Among<Context>; 12] = &[
    Among("\u{03C1}\u{03C0}", -1, 1, None),
    Among("\u{03C0}\u{03C1}", -1, 1, None),
    Among("\u{03C6}\u{03C1}", -1, 1, None),
    Among("\u{03C7}\u{03BF}\u{03C1}\u{03C4}", -1, 1, None),
    Among("\u{03C3}\u{03C6}", -1, 1, None),
    Among("\u{03BF}\u{03C6}", -1, 1, None),
    Among("\u{03C8}\u{03BF}\u{03C6}", 5, -1, None),
    Among("\u{03BB}\u{03BF}\u{03C7}", -1, 1, None),
    Among(
        "\u{03BD}\u{03B1}\u{03C5}\u{03BB}\u{03BF}\u{03C7}",
        7,
        -1,
        None,
    ),
    Among("\u{03C0}\u{03B5}\u{03BB}", -1, 1, None),
    Among("\u{03BB}\u{03BB}", -1, 1, None),
    Among("\u{03C3}\u{03BC}\u{03B7}\u{03BD}", -1, 1, None),
];

static A_55: &'static [Among<Context>; 44] = &[
    Among("\u{03C0}", -1, 1, None),
    Among("\u{03B1}\u{03C3}\u{03C0}", 0, 1, None),
    Among("\u{03B1}\u{03BD}\u{03C5}\u{03C0}", 0, 1, None),
    Among("\u{03B1}\u{03C1}\u{03C4}\u{03B9}\u{03C0}", 0, 1, None),
    Among("\u{03B1}\u{03B5}\u{03B9}\u{03C0}", 0, 1, None),
    Among("\u{03C3}\u{03C5}\u{03BC}\u{03C0}", 0, 1, None),
    Among(
        "\u{03C0}\u{03C1}\u{03BF}\u{03C3}\u{03C9}\u{03C0}\u{03BF}\u{03C0}",
        0,
        1,
        None,
    ),
    Among(
        "\u{03C3}\u{03B9}\u{03B4}\u{03B7}\u{03C1}\u{03BF}\u{03C0}",
        0,
        1,
        None,
    ),
    Among(
        "\u{03B4}\u{03C1}\u{03BF}\u{03C3}\u{03BF}\u{03C0}",
        0,
        1,
        None,
    ),
    Among("\u{03BD}\u{03B5}\u{03BF}\u{03C0}", 0, 1, None),
    Among(
        "\u{03BA}\u{03C1}\u{03BF}\u{03BA}\u{03B1}\u{03BB}\u{03BF}\u{03C0}",
        0,
        1,
        None,
    ),
    Among("\u{03BF}\u{03BB}\u{03BF}\u{03C0}", 0, 1, None),
    Among("\u{03C1}", -1, 1, None),
    Among("\u{03C4}\u{03C1}", 12, 1, None),
    Among("\u{03BF}\u{03C5}\u{03C1}", 12, 1, None),
    Among("\u{03B1}\u{03C3}\u{03C0}\u{03B1}\u{03C1}", 12, 1, None),
    Among("\u{03C7}\u{03B1}\u{03C1}", 12, 1, None),
    Among("\u{03B1}\u{03C7}\u{03B1}\u{03C1}", 16, 1, None),
    Among("\u{03B1}\u{03C0}\u{03B5}\u{03C1}", 12, 1, None),
    Among("\u{03C4}", -1, 1, None),
    Among("\u{03B1}\u{03BD}\u{03C5}\u{03C3}\u{03C4}", 19, 1, None),
    Among("\u{03B1}\u{03B2}\u{03B1}\u{03C3}\u{03C4}", 19, 1, None),
    Among("\u{03C0}\u{03C1}\u{03BF}\u{03C3}\u{03C4}", 19, 1, None),
    Among(
        "\u{03B1}\u{03B9}\u{03BC}\u{03BF}\u{03C3}\u{03C4}",
        19,
        1,
        None,
    ),
    Among("\u{03B4}\u{03B9}\u{03B1}\u{03C4}", 19, 1, None),
    Among("\u{03B5}\u{03C0}\u{03B9}\u{03C4}", 19, 1, None),
    Among("\u{03C3}\u{03C5}\u{03BD}\u{03C4}", 19, 1, None),
    Among("\u{03C5}\u{03C0}\u{03BF}\u{03C4}", 19, 1, None),
    Among("\u{03B1}\u{03C0}\u{03BF}\u{03C4}", 19, 1, None),
    Among("\u{03BF}\u{03BC}\u{03BF}\u{03C4}", 19, 1, None),
    Among("\u{03BD}\u{03BF}\u{03BC}\u{03BF}\u{03C4}", 29, 1, None),
    Among("\u{03BD}\u{03B1}\u{03C5}", -1, 1, None),
    Among("\u{03C0}\u{03BF}\u{03BB}\u{03C5}\u{03C6}", -1, 1, None),
    Among("\u{03B1}\u{03C6}", -1, 1, None),
    Among("\u{03BE}\u{03B5}\u{03C6}", -1, 1, None),
    Among("\u{03B1}\u{03B4}\u{03B7}\u{03C6}", -1, 1, None),
    Among("\u{03C0}\u{03B1}\u{03BC}\u{03C6}", -1, 1, None),
    Among(
        "\u{03B1}\u{03BC}\u{03B1}\u{03BB}\u{03BB}\u{03B9}",
        -1,
        1,
        None,
    ),
    Among("\u{03BB}", -1, 1, None),
    Among("\u{03B1}\u{03BC}\u{03B1}\u{03BB}", 38, 1, None),
    Among("\u{03BC}", -1, 1, None),
    Among("\u{03BF}\u{03C5}\u{03BB}\u{03B1}\u{03BC}", 40, 1, None),
    Among("\u{03B5}\u{03BD}", -1, 1, None),
    Among(
        "\u{03B4}\u{03B5}\u{03C1}\u{03B2}\u{03B5}\u{03BD}",
        42,
        1,
        None,
    ),
];

static A_56: &'static [Among<Context>; 3] = &[
    Among("\u{03B1}\u{03B3}\u{03B5}\u{03C3}", -1, 1, None),
    Among("\u{03B1}\u{03B3}\u{03B1}", -1, 1, None),
    Among("\u{03B1}\u{03B3}\u{03B5}", -1, 1, None),
];

static A_57: &'static [Among<Context>; 3] = &[
    Among("\u{03B7}\u{03C3}\u{03BF}\u{03C5}", -1, 1, None),
    Among("\u{03B7}\u{03C3}\u{03B1}", -1, 1, None),
    Among("\u{03B7}\u{03C3}\u{03B5}", -1, 1, None),
];

static A_58: &'static [Among<Context>; 6] = &[
    Among("\u{03BD}", -1, 1, None),
    Among("\u{03B5}\u{03C0}\u{03C4}\u{03B1}\u{03BD}", 0, 1, None),
    Among(
        "\u{03B4}\u{03C9}\u{03B4}\u{03B5}\u{03BA}\u{03B1}\u{03BD}",
        0,
        1,
        None,
    ),
    Among(
        "\u{03C7}\u{03B5}\u{03C1}\u{03C3}\u{03BF}\u{03BD}",
        0,
        1,
        None,
    ),
    Among(
        "\u{03BC}\u{03B5}\u{03B3}\u{03B1}\u{03BB}\u{03BF}\u{03BD}",
        0,
        1,
        None,
    ),
    Among(
        "\u{03B5}\u{03C1}\u{03B7}\u{03BC}\u{03BF}\u{03BD}",
        0,
        1,
        None,
    ),
];

static A_59: &'static [Among<Context>; 1] =
    &[Among("\u{03B7}\u{03C3}\u{03C4}\u{03B5}", -1, 1, None)];

static A_60: &'static [Among<Context>; 10] = &[
    Among("\u{03C7}\u{03C1}", -1, 1, None),
    Among("\u{03B4}\u{03C5}\u{03C3}\u{03C7}\u{03C1}", 0, 1, None),
    Among("\u{03B5}\u{03C5}\u{03C7}\u{03C1}", 0, 1, None),
    Among("\u{03B1}\u{03C7}\u{03C1}", 0, 1, None),
    Among(
        "\u{03BA}\u{03BF}\u{03B9}\u{03BD}\u{03BF}\u{03C7}\u{03C1}",
        0,
        1,
        None,
    ),
    Among(
        "\u{03C0}\u{03B1}\u{03BB}\u{03B9}\u{03BC}\u{03C8}",
        -1,
        1,
        None,
    ),
    Among("\u{03C3}\u{03B2}", -1, 1, None),
    Among("\u{03B1}\u{03C3}\u{03B2}", 6, 1, None),
    Among("\u{03B1}\u{03C0}\u{03BB}", -1, 1, None),
    Among("\u{03B1}\u{03B5}\u{03B9}\u{03BC}\u{03BD}", -1, 1, None),
];

static A_61: &'static [Among<Context>; 3] = &[
    Among("\u{03BF}\u{03C5}\u{03BD}\u{03B5}", -1, 1, None),
    Among(
        "\u{03B7}\u{03C3}\u{03BF}\u{03C5}\u{03BD}\u{03B5}",
        0,
        1,
        None,
    ),
    Among(
        "\u{03B7}\u{03B8}\u{03BF}\u{03C5}\u{03BD}\u{03B5}",
        0,
        1,
        None,
    ),
];

static A_62: &'static [Among<Context>; 6] = &[
    Among("\u{03C1}", -1, 1, None),
    Among(
        "\u{03C3}\u{03C4}\u{03C1}\u{03B1}\u{03B2}\u{03BF}\u{03BC}\u{03BF}\u{03C5}\u{03C4}\u{03C3}",
        -1,
        1,
        None,
    ),
    Among(
        "\u{03BA}\u{03B1}\u{03BA}\u{03BF}\u{03BC}\u{03BF}\u{03C5}\u{03C4}\u{03C3}",
        -1,
        1,
        None,
    ),
    Among("\u{03C3}\u{03C0}\u{03B9}", -1, 1, None),
    Among("\u{03BD}", -1, 1, None),
    Among("\u{03B5}\u{03BE}\u{03C9}\u{03BD}", 4, 1, None),
];

static A_63: &'static [Among<Context>; 3] = &[
    Among("\u{03BF}\u{03C5}\u{03BC}\u{03B5}", -1, 1, None),
    Among(
        "\u{03B7}\u{03C3}\u{03BF}\u{03C5}\u{03BC}\u{03B5}",
        0,
        1,
        None,
    ),
    Among(
        "\u{03B7}\u{03B8}\u{03BF}\u{03C5}\u{03BC}\u{03B5}",
        0,
        1,
        None,
    ),
];

static A_64: &'static [Among<Context>; 7] = &[
    Among("\u{03B1}\u{03C3}\u{03BF}\u{03C5}\u{03C3}", -1, 1, None),
    Among(
        "\u{03C0}\u{03B1}\u{03C1}\u{03B1}\u{03C3}\u{03BF}\u{03C5}\u{03C3}",
        0,
        1,
        None,
    ),
    Among(
        "\u{03B1}\u{03BB}\u{03BB}\u{03BF}\u{03C3}\u{03BF}\u{03C5}\u{03C3}",
        -1,
        1,
        None,
    ),
    Among("\u{03C6}", -1, 1, None),
    Among("\u{03C7}", -1, 1, None),
    Among("\u{03B1}\u{03B6}", -1, 1, None),
    Among(
        "\u{03C9}\u{03C1}\u{03B9}\u{03BF}\u{03C0}\u{03BB}",
        -1,
        1,
        None,
    ),
];

static A_65: &'static [Among<Context>; 3] = &[
    Among("\u{03BC}\u{03B1}\u{03C4}\u{03BF}\u{03C3}", -1, 1, None),
    Among("\u{03BC}\u{03B1}\u{03C4}\u{03B1}", -1, 1, None),
    Among("\u{03BC}\u{03B1}\u{03C4}\u{03C9}\u{03BD}", -1, 1, None),
];

static A_66: &'static [Among<Context>; 84] = &[
    Among("\u{03C5}\u{03C3}", -1, 1, None),
    Among("\u{03BF}\u{03C5}\u{03C3}", 0, 1, None),
    Among("\u{03B1}\u{03C3}", -1, 1, None),
    Among("\u{03B5}\u{03C3}", -1, 1, None),
    Among("\u{03B7}\u{03C3}\u{03B5}\u{03C3}", 3, 1, None),
    Among("\u{03B7}\u{03B4}\u{03B5}\u{03C3}", 3, 1, None),
    Among("\u{03B7}\u{03C3}", -1, 1, None),
    Among("\u{03B5}\u{03B9}\u{03C3}", -1, 1, None),
    Among("\u{03B7}\u{03B8}\u{03B5}\u{03B9}\u{03C3}", 7, 1, None),
    Among("\u{03BF}\u{03C3}", -1, 1, None),
    Among("\u{03C5}", -1, 1, None),
    Among("\u{03BF}\u{03C5}", 10, 1, None),
    Among("\u{03C9}", -1, 1, None),
    Among("\u{03B7}\u{03C3}\u{03C9}", 12, 1, None),
    Among("\u{03B1}\u{03C9}", 12, 1, None),
    Among("\u{03B7}\u{03B8}\u{03C9}", 12, 1, None),
    Among("\u{03B1}", -1, 1, None),
    Among("\u{03B9}\u{03BF}\u{03C5}\u{03BC}\u{03B1}", 16, 1, None),
    Among(
        "\u{03BF}\u{03C3}\u{03BF}\u{03C5}\u{03BD}\u{03B1}",
        16,
        1,
        None,
    ),
    Among(
        "\u{03B9}\u{03BF}\u{03C3}\u{03BF}\u{03C5}\u{03BD}\u{03B1}",
        18,
        1,
        None,
    ),
    Among(
        "\u{03BF}\u{03BC}\u{03BF}\u{03C5}\u{03BD}\u{03B1}",
        16,
        1,
        None,
    ),
    Among(
        "\u{03B9}\u{03BF}\u{03BC}\u{03BF}\u{03C5}\u{03BD}\u{03B1}",
        20,
        1,
        None,
    ),
    Among("\u{03B5}", -1, 1, None),
    Among(
        "\u{03B9}\u{03B5}\u{03C3}\u{03B1}\u{03C3}\u{03C4}\u{03B5}",
        22,
        1,
        None,
    ),
    Among(
        "\u{03BF}\u{03C3}\u{03B1}\u{03C3}\u{03C4}\u{03B5}",
        22,
        1,
        None,
    ),
    Among(
        "\u{03B9}\u{03BF}\u{03C3}\u{03B1}\u{03C3}\u{03C4}\u{03B5}",
        24,
        1,
        None,
    ),
    Among(
        "\u{03BF}\u{03C5}\u{03BC}\u{03B1}\u{03C3}\u{03C4}\u{03B5}",
        22,
        1,
        None,
    ),
    Among(
        "\u{03B9}\u{03BF}\u{03C5}\u{03BC}\u{03B1}\u{03C3}\u{03C4}\u{03B5}",
        26,
        1,
        None,
    ),
    Among(
        "\u{03B9}\u{03B5}\u{03BC}\u{03B1}\u{03C3}\u{03C4}\u{03B5}",
        22,
        1,
        None,
    ),
    Among(
        "\u{03BF}\u{03C5}\u{03C3}\u{03B1}\u{03C4}\u{03B5}",
        22,
        1,
        None,
    ),
    Among("\u{03B7}\u{03C3}\u{03B1}\u{03C4}\u{03B5}", 22, 1, None),
    Among("\u{03B1}\u{03B3}\u{03B1}\u{03C4}\u{03B5}", 22, 1, None),
    Among("\u{03B7}\u{03BA}\u{03B1}\u{03C4}\u{03B5}", 22, 1, None),
    Among(
        "\u{03B7}\u{03B8}\u{03B7}\u{03BA}\u{03B1}\u{03C4}\u{03B5}",
        32,
        1,
        None,
    ),
    Among("\u{03B5}\u{03B9}\u{03C4}\u{03B5}", 22, 1, None),
    Among(
        "\u{03B7}\u{03B8}\u{03B5}\u{03B9}\u{03C4}\u{03B5}",
        34,
        1,
        None,
    ),
    Among("\u{03B7}", -1, 1, None),
    Among("\u{03B9}", -1, 1, None),
    Among("\u{03B1}\u{03C3}\u{03B1}\u{03B9}", 37, 1, None),
    Among("\u{03B5}\u{03C3}\u{03B1}\u{03B9}", 37, 1, None),
    Among("\u{03B9}\u{03B5}\u{03C3}\u{03B1}\u{03B9}", 39, 1, None),
    Among("\u{03B1}\u{03C4}\u{03B1}\u{03B9}", 37, 1, None),
    Among("\u{03B5}\u{03C4}\u{03B1}\u{03B9}", 37, 1, None),
    Among("\u{03B9}\u{03B5}\u{03C4}\u{03B1}\u{03B9}", 42, 1, None),
    Among(
        "\u{03BF}\u{03C5}\u{03BD}\u{03C4}\u{03B1}\u{03B9}",
        37,
        1,
        None,
    ),
    Among(
        "\u{03B9}\u{03BF}\u{03C5}\u{03BD}\u{03C4}\u{03B1}\u{03B9}",
        44,
        1,
        None,
    ),
    Among("\u{03BF}\u{03BD}\u{03C4}\u{03B1}\u{03B9}", 37, 1, None),
    Among("\u{03BF}\u{03C5}\u{03BC}\u{03B1}\u{03B9}", 37, 1, None),
    Among("\u{03B1}\u{03BC}\u{03B1}\u{03B9}", 37, 1, None),
    Among("\u{03B9}\u{03B5}\u{03BC}\u{03B1}\u{03B9}", 37, 1, None),
    Among("\u{03BF}\u{03BC}\u{03B1}\u{03B9}", 37, 1, None),
    Among("\u{03B5}\u{03B9}", 37, 1, None),
    Among("\u{03B7}\u{03C3}\u{03B5}\u{03B9}", 51, 1, None),
    Among("\u{03B1}\u{03B5}\u{03B9}", 51, 1, None),
    Among("\u{03B7}\u{03B8}\u{03B5}\u{03B9}", 51, 1, None),
    Among("\u{03BF}\u{03B9}", 37, 1, None),
    Among("\u{03BF}\u{03C5}\u{03BD}", -1, 1, None),
    Among("\u{03B7}\u{03C3}\u{03BF}\u{03C5}\u{03BD}", 56, 1, None),
    Among("\u{03BF}\u{03C3}\u{03BF}\u{03C5}\u{03BD}", 56, 1, None),
    Among(
        "\u{03B9}\u{03BF}\u{03C3}\u{03BF}\u{03C5}\u{03BD}",
        58,
        1,
        None,
    ),
    Among("\u{03B7}\u{03B8}\u{03BF}\u{03C5}\u{03BD}", 56, 1, None),
    Among("\u{03BF}\u{03BC}\u{03BF}\u{03C5}\u{03BD}", 56, 1, None),
    Among(
        "\u{03B9}\u{03BF}\u{03BC}\u{03BF}\u{03C5}\u{03BD}",
        61,
        1,
        None,
    ),
    Among("\u{03C9}\u{03BD}", -1, 1, None),
    Among("\u{03B7}\u{03B4}\u{03C9}\u{03BD}", 63, 1, None),
    Among("\u{03B1}\u{03BD}", -1, 1, None),
    Among("\u{03BF}\u{03C5}\u{03C3}\u{03B1}\u{03BD}", 65, 1, None),
    Among(
        "\u{03BF}\u{03BD}\u{03C4}\u{03BF}\u{03C5}\u{03C3}\u{03B1}\u{03BD}",
        66,
        1,
        None,
    ),
    Among(
        "\u{03B9}\u{03BF}\u{03BD}\u{03C4}\u{03BF}\u{03C5}\u{03C3}\u{03B1}\u{03BD}",
        67,
        1,
        None,
    ),
    Among("\u{03B7}\u{03C3}\u{03B1}\u{03BD}", 65, 1, None),
    Among(
        "\u{03BF}\u{03C3}\u{03B1}\u{03C3}\u{03C4}\u{03B1}\u{03BD}",
        65,
        1,
        None,
    ),
    Among(
        "\u{03B9}\u{03BF}\u{03C3}\u{03B1}\u{03C3}\u{03C4}\u{03B1}\u{03BD}",
        70,
        1,
        None,
    ),
    Among(
        "\u{03BF}\u{03BC}\u{03B1}\u{03C3}\u{03C4}\u{03B1}\u{03BD}",
        65,
        1,
        None,
    ),
    Among(
        "\u{03B9}\u{03BF}\u{03BC}\u{03B1}\u{03C3}\u{03C4}\u{03B1}\u{03BD}",
        72,
        1,
        None,
    ),
    Among(
        "\u{03BF}\u{03C5}\u{03BD}\u{03C4}\u{03B1}\u{03BD}",
        65,
        1,
        None,
    ),
    Among(
        "\u{03B9}\u{03BF}\u{03C5}\u{03BD}\u{03C4}\u{03B1}\u{03BD}",
        74,
        1,
        None,
    ),
    Among("\u{03BF}\u{03BD}\u{03C4}\u{03B1}\u{03BD}", 65, 1, None),
    Among(
        "\u{03B9}\u{03BF}\u{03BD}\u{03C4}\u{03B1}\u{03BD}",
        76,
        1,
        None,
    ),
    Among("\u{03BF}\u{03C4}\u{03B1}\u{03BD}", 65, 1, None),
    Among("\u{03B9}\u{03BF}\u{03C4}\u{03B1}\u{03BD}", 78, 1, None),
    Among("\u{03B1}\u{03B3}\u{03B1}\u{03BD}", 65, 1, None),
    Among("\u{03B7}\u{03BA}\u{03B1}\u{03BD}", 65, 1, None),
    Among(
        "\u{03B7}\u{03B8}\u{03B7}\u{03BA}\u{03B1}\u{03BD}",
        81,
        1,
        None,
    ),
    Among("\u{03BF}", -1, 1, None),
];

static A_67: &'static [Among<Context>; 8] = &[
    Among("\u{03B5}\u{03C3}\u{03C4}\u{03B5}\u{03C1}", -1, 1, None),
    Among("\u{03C5}\u{03C4}\u{03B5}\u{03C1}", -1, 1, None),
    Among("\u{03C9}\u{03C4}\u{03B5}\u{03C1}", -1, 1, None),
    Among("\u{03BF}\u{03C4}\u{03B5}\u{03C1}", -1, 1, None),
    Among("\u{03B5}\u{03C3}\u{03C4}\u{03B1}\u{03C4}", -1, 1, None),
    Among("\u{03C5}\u{03C4}\u{03B1}\u{03C4}", -1, 1, None),
    Among("\u{03C9}\u{03C4}\u{03B1}\u{03C4}", -1, 1, None),
    Among("\u{03BF}\u{03C4}\u{03B1}\u{03C4}", -1, 1, None),
];

static G_v: &'static [u8; 4] = &[81, 65, 16, 1];

static G_v2: &'static [u8; 4] = &[81, 65, 0, 1];

#[derive(Clone)]
struct Context {
    b_test1: bool,
}

fn r_has_min_length(env: &mut SnowballEnv, context: &mut Context) -> bool {
    return (env.current.chars().count() as i32) >= 3;
}

fn r_tolower(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    'replab0: loop {
        let v_1 = env.limit - env.cursor;
        'lab1: for _ in 0..1 {
            env.ket = env.cursor;
            among_var = env.find_among_b(A_0, context);
            env.bra = env.cursor;
            match among_var {
                1 => {
                    if !env.slice_from("\u{03B1}") {
                        return false;
                    }
                }
                2 => {
                    if !env.slice_from("\u{03B2}") {
                        return false;
                    }
                }
                3 => {
                    if !env.slice_from("\u{03B3}") {
                        return false;
                    }
                }
                4 => {
                    if !env.slice_from("\u{03B4}") {
                        return false;
                    }
                }
                5 => {
                    if !env.slice_from("\u{03B5}") {
                        return false;
                    }
                }
                6 => {
                    if !env.slice_from("\u{03B6}") {
                        return false;
                    }
                }
                7 => {
                    if !env.slice_from("\u{03B7}") {
                        return false;
                    }
                }
                8 => {
                    if !env.slice_from("\u{03B8}") {
                        return false;
                    }
                }
                9 => {
                    if !env.slice_from("\u{03B9}") {
                        return false;
                    }
                }
                10 => {
                    if !env.slice_from("\u{03BA}") {
                        return false;
                    }
                }
                11 => {
                    if !env.slice_from("\u{03BB}") {
                        return false;
                    }
                }
                12 => {
                    if !env.slice_from("\u{03BC}") {
                        return false;
                    }
                }
                13 => {
                    if !env.slice_from("\u{03BD}") {
                        return false;
                    }
                }
                14 => {
                    if !env.slice_from("\u{03BE}") {
                        return false;
                    }
                }
                15 => {
                    if !env.slice_from("\u{03BF}") {
                        return false;
                    }
                }
                16 => {
                    if !env.slice_from("\u{03C0}") {
                        return false;
                    }
                }
                17 => {
                    if !env.slice_from("\u{03C1}") {
                        return false;
                    }
                }
                18 => {
                    if !env.slice_from("\u{03C3}") {
                        return false;
                    }
                }
                19 => {
                    if !env.slice_from("\u{03C4}") {
                        return false;
                    }
                }
                20 => {
                    if !env.slice_from("\u{03C5}") {
                        return false;
                    }
                }
                21 => {
                    if !env.slice_from("\u{03C6}") {
                        return false;
                    }
                }
                22 => {
                    if !env.slice_from("\u{03C7}") {
                        return false;
                    }
                }
                23 => {
                    if !env.slice_from("\u{03C8}") {
                        return false;
                    }
                }
                24 => {
                    if !env.slice_from("\u{03C9}") {
                        return false;
                    }
                }
                25 => {
                    if env.cursor <= env.limit_backward {
                        break 'lab1;
                    }
                    env.previous_char();
                }
                _ => (),
            }
            continue 'replab0;
        }
        env.cursor = env.limit - v_1;
        break 'replab0;
    }
    return true;
}

fn r_step_1(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    env.ket = env.cursor;
    among_var = env.find_among_b(A_1, context);
    if among_var == 0 {
        return false;
    }
    env.bra = env.cursor;
    match among_var {
        1 => {
            if !env.slice_from("\u{03C6}\u{03B1}") {
                return false;
            }
        }
        2 => {
            if !env.slice_from("\u{03C3}\u{03BA}\u{03B1}") {
                return false;
            }
        }
        3 => {
            if !env.slice_from("\u{03BF}\u{03BB}\u{03BF}") {
                return false;
            }
        }
        4 => {
            if !env.slice_from("\u{03C3}\u{03BF}") {
                return false;
            }
        }
        5 => {
            if !env.slice_from("\u{03C4}\u{03B1}\u{03C4}\u{03BF}") {
                return false;
            }
        }
        6 => {
            if !env.slice_from("\u{03BA}\u{03C1}\u{03B5}") {
                return false;
            }
        }
        7 => {
            if !env.slice_from("\u{03C0}\u{03B5}\u{03C1}") {
                return false;
            }
        }
        8 => {
            if !env.slice_from("\u{03C4}\u{03B5}\u{03C1}") {
                return false;
            }
        }
        9 => {
            if !env.slice_from("\u{03C6}\u{03C9}") {
                return false;
            }
        }
        10 => {
            if !env.slice_from("\u{03BA}\u{03B1}\u{03B8}\u{03B5}\u{03C3}\u{03C4}") {
                return false;
            }
        }
        11 => {
            if !env.slice_from("\u{03B3}\u{03B5}\u{03B3}\u{03BF}\u{03BD}") {
                return false;
            }
        }
        _ => (),
    }
    context.b_test1 = false;
    return true;
}

fn r_step_s1(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    env.ket = env.cursor;
    if env.find_among_b(A_3, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    env.ket = env.cursor;
    env.bra = env.cursor;
    among_var = env.find_among_b(A_2, context);
    if among_var == 0 {
        return false;
    }
    if env.cursor > env.limit_backward {
        return false;
    }
    match among_var {
        1 => {
            if !env.slice_from("\u{03B9}") {
                return false;
            }
        }
        2 => {
            if !env.slice_from("\u{03B9}\u{03B6}") {
                return false;
            }
        }
        _ => (),
    }
    return true;
}

fn r_step_s2(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if env.find_among_b(A_5, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    env.ket = env.cursor;
    env.bra = env.cursor;
    if env.find_among_b(A_4, context) == 0 {
        return false;
    }
    if env.cursor > env.limit_backward {
        return false;
    }
    if !env.slice_from("\u{03C9}\u{03BD}") {
        return false;
    }
    return true;
}

fn r_step_s3(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    'lab0: loop {
        let v_1 = env.limit - env.cursor;
        'lab1: loop {
            env.ket = env.cursor;
            if !env.eq_s_b(&"\u{03B9}\u{03C3}\u{03B1}") {
                break 'lab1;
            }
            env.bra = env.cursor;
            if env.cursor > env.limit_backward {
                break 'lab1;
            }
            if !env.slice_from("\u{03B9}\u{03C3}") {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        env.ket = env.cursor;
        break 'lab0;
    }
    if env.find_among_b(A_7, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    env.ket = env.cursor;
    env.bra = env.cursor;
    among_var = env.find_among_b(A_6, context);
    if among_var == 0 {
        return false;
    }
    if env.cursor > env.limit_backward {
        return false;
    }
    match among_var {
        1 => {
            if !env.slice_from("\u{03B9}") {
                return false;
            }
        }
        2 => {
            if !env.slice_from("\u{03B9}\u{03C3}") {
                return false;
            }
        }
        _ => (),
    }
    return true;
}

fn r_step_s4(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if env.find_among_b(A_9, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    env.ket = env.cursor;
    env.bra = env.cursor;
    if (env.cursor - 3 <= env.limit_backward
        || env.current.as_bytes()[(env.cursor - 1) as usize] as u8 >> 5 != 5 as u8
        || ((-2145255424 as i32
            >> (env.current.as_bytes()[(env.cursor - 1) as usize] as u8 & 0x1f))
            & 1)
            == 0)
    {
        return false;
    }
    if env.find_among_b(A_8, context) == 0 {
        return false;
    }
    if env.cursor > env.limit_backward {
        return false;
    }
    if !env.slice_from("\u{03B9}") {
        return false;
    }
    return true;
}

fn r_step_s5(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    env.ket = env.cursor;
    if env.find_among_b(A_11, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    env.ket = env.cursor;
    env.bra = env.cursor;
    among_var = env.find_among_b(A_10, context);
    if among_var == 0 {
        return false;
    }
    if env.cursor > env.limit_backward {
        return false;
    }
    match among_var {
        1 => {
            if !env.slice_from("\u{03B9}") {
                return false;
            }
        }
        2 => {
            if !env.slice_from("\u{03B9}\u{03C3}\u{03C4}") {
                return false;
            }
        }
        _ => (),
    }
    return true;
}

fn r_step_s6(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    env.ket = env.cursor;
    if env.find_among_b(A_14, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    'lab0: loop {
        let v_1 = env.limit - env.cursor;
        'lab1: loop {
            env.ket = env.cursor;
            env.bra = env.cursor;
            if (env.cursor - 3 <= env.limit_backward
                || env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 181 as u8)
            {
                break 'lab1;
            }
            among_var = env.find_among_b(A_12, context);
            if among_var == 0 {
                break 'lab1;
            }
            if env.cursor > env.limit_backward {
                break 'lab1;
            }
            match among_var {
                1 => {
                    if !env.slice_from("\u{03B9}\u{03C3}\u{03BC}") {
                        return false;
                    }
                }
                2 => {
                    if !env.slice_from("\u{03B9}") {
                        return false;
                    }
                }
                _ => (),
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        env.ket = env.cursor;
        if (env.cursor - 9 <= env.limit_backward
            || (env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 186 as u8
                && env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 189 as u8))
        {
            return false;
        }
        among_var = env.find_among_b(A_13, context);
        if among_var == 0 {
            return false;
        }
        env.bra = env.cursor;
        match among_var {
            1 => {
                if !env.slice_from("\u{03B1}\u{03B3}\u{03BD}\u{03C9}\u{03C3}\u{03C4}") {
                    return false;
                }
            }
            2 => {
                if !env.slice_from("\u{03B1}\u{03C4}\u{03BF}\u{03BC}") {
                    return false;
                }
            }
            3 => {
                if !env.slice_from("\u{03B3}\u{03BD}\u{03C9}\u{03C3}\u{03C4}") {
                    return false;
                }
            }
            4 => {
                if !env.slice_from("\u{03B5}\u{03B8}\u{03BD}") {
                    return false;
                }
            }
            5 => {
                if !env.slice_from("\u{03B5}\u{03BA}\u{03BB}\u{03B5}\u{03BA}\u{03C4}") {
                    return false;
                }
            }
            6 => {
                if !env.slice_from("\u{03C3}\u{03BA}\u{03B5}\u{03C0}\u{03C4}") {
                    return false;
                }
            }
            7 => {
                if !env.slice_from("\u{03C4}\u{03BF}\u{03C0}") {
                    return false;
                }
            }
            8 => {
                if !env
                    .slice_from("\u{03B1}\u{03BB}\u{03B5}\u{03BE}\u{03B1}\u{03BD}\u{03B4}\u{03C1}")
                {
                    return false;
                }
            }
            9 => {
                if !env.slice_from("\u{03B2}\u{03C5}\u{03B6}\u{03B1}\u{03BD}\u{03C4}") {
                    return false;
                }
            }
            10 => {
                if !env.slice_from("\u{03B8}\u{03B5}\u{03B1}\u{03C4}\u{03C1}") {
                    return false;
                }
            }
            _ => (),
        }
        break 'lab0;
    }
    return true;
}

fn r_step_s7(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if (env.cursor - 9 <= env.limit_backward
        || (env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 177 as u8
            && env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 185 as u8))
    {
        return false;
    }
    if env.find_among_b(A_16, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    env.ket = env.cursor;
    env.bra = env.cursor;
    if (env.cursor - 1 <= env.limit_backward
        || (env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 131 as u8
            && env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 135 as u8))
    {
        return false;
    }
    if env.find_among_b(A_15, context) == 0 {
        return false;
    }
    if env.cursor > env.limit_backward {
        return false;
    }
    if !env.slice_from("\u{03B1}\u{03C1}\u{03B1}\u{03BA}") {
        return false;
    }
    return true;
}

fn r_step_s8(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    env.ket = env.cursor;
    if env.find_among_b(A_18, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    'lab0: loop {
        let v_1 = env.limit - env.cursor;
        'lab1: loop {
            env.ket = env.cursor;
            env.bra = env.cursor;
            among_var = env.find_among_b(A_17, context);
            if among_var == 0 {
                break 'lab1;
            }
            if env.cursor > env.limit_backward {
                break 'lab1;
            }
            match among_var {
                1 => {
                    if !env.slice_from("\u{03B1}\u{03BA}") {
                        return false;
                    }
                }
                2 => {
                    if !env.slice_from("\u{03B9}\u{03C4}\u{03C3}") {
                        return false;
                    }
                }
                _ => (),
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        env.ket = env.cursor;
        env.bra = env.cursor;
        if !env.eq_s_b(&"\u{03BA}\u{03BF}\u{03C1}") {
            return false;
        }
        if !env.slice_from("\u{03B9}\u{03C4}\u{03C3}") {
            return false;
        }
        break 'lab0;
    }
    return true;
}

fn r_step_s9(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if (env.cursor - 7 <= env.limit_backward
        || env.current.as_bytes()[(env.cursor - 1) as usize] as u8 >> 5 != 5 as u8
        || ((-1610481664 as i32
            >> (env.current.as_bytes()[(env.cursor - 1) as usize] as u8 & 0x1f))
            & 1)
            == 0)
    {
        return false;
    }
    if env.find_among_b(A_21, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    'lab0: loop {
        let v_1 = env.limit - env.cursor;
        'lab1: loop {
            env.ket = env.cursor;
            env.bra = env.cursor;
            if env.find_among_b(A_19, context) == 0 {
                break 'lab1;
            }
            if env.cursor > env.limit_backward {
                break 'lab1;
            }
            if !env.slice_from("\u{03B9}\u{03B4}") {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        env.ket = env.cursor;
        env.bra = env.cursor;
        if (env.cursor - 1 <= env.limit_backward
            || (env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 181 as u8
                && env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 189 as u8))
        {
            return false;
        }
        if env.find_among_b(A_20, context) == 0 {
            return false;
        }
        if !env.slice_from("\u{03B9}\u{03B4}") {
            return false;
        }
        break 'lab0;
    }
    return true;
}

fn r_step_s10(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if env.find_among_b(A_23, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    env.ket = env.cursor;
    env.bra = env.cursor;
    if env.find_among_b(A_22, context) == 0 {
        return false;
    }
    if env.cursor > env.limit_backward {
        return false;
    }
    if !env.slice_from("\u{03B9}\u{03C3}\u{03BA}") {
        return false;
    }
    return true;
}

fn r_step_2a(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if (env.cursor - 7 <= env.limit_backward
        || (env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 131 as u8
            && env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 189 as u8))
    {
        return false;
    }
    if env.find_among_b(A_24, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    let v_1 = env.limit - env.cursor;
    'lab0: loop {
        if env.find_among_b(A_25, context) == 0 {
            break 'lab0;
        }
        return false;
    }
    env.cursor = env.limit - v_1;
    let c = env.cursor;
    let (bra, ket) = (env.cursor, env.cursor);
    env.insert(bra, ket, "\u{03B1}\u{03B4}");
    env.cursor = c;
    return true;
}

fn r_step_2b(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if (env.cursor - 7 <= env.limit_backward
        || (env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 131 as u8
            && env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 189 as u8))
    {
        return false;
    }
    if env.find_among_b(A_26, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    env.ket = env.cursor;
    env.bra = env.cursor;
    if (env.cursor - 3 <= env.limit_backward
        || (env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 128 as u8
            && env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 187 as u8))
    {
        return false;
    }
    if env.find_among_b(A_27, context) == 0 {
        return false;
    }
    if !env.slice_from("\u{03B5}\u{03B4}") {
        return false;
    }
    return true;
}

fn r_step_2c(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if (env.cursor - 9 <= env.limit_backward
        || (env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 131 as u8
            && env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 189 as u8))
    {
        return false;
    }
    if env.find_among_b(A_28, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    env.ket = env.cursor;
    env.bra = env.cursor;
    if env.find_among_b(A_29, context) == 0 {
        return false;
    }
    if !env.slice_from("\u{03BF}\u{03C5}\u{03B4}") {
        return false;
    }
    return true;
}

fn r_step_2d(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if (env.cursor - 5 <= env.limit_backward
        || (env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 131 as u8
            && env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 189 as u8))
    {
        return false;
    }
    if env.find_among_b(A_30, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    env.ket = env.cursor;
    env.bra = env.cursor;
    if env.find_among_b(A_31, context) == 0 {
        return false;
    }
    if env.cursor > env.limit_backward {
        return false;
    }
    if !env.slice_from("\u{03B5}") {
        return false;
    }
    return true;
}

fn r_step_3(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if env.find_among_b(A_32, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    env.ket = env.cursor;
    env.bra = env.cursor;
    if !env.in_grouping_b(G_v, 945, 969) {
        return false;
    }
    if !env.slice_from("\u{03B9}") {
        return false;
    }
    return true;
}

fn r_step_4(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if env.find_among_b(A_33, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    'lab0: loop {
        let v_1 = env.limit - env.cursor;
        'lab1: loop {
            env.ket = env.cursor;
            env.bra = env.cursor;
            if !env.in_grouping_b(G_v, 945, 969) {
                break 'lab1;
            }
            if !env.slice_from("\u{03B9}\u{03BA}") {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        env.ket = env.cursor;
        break 'lab0;
    }
    env.bra = env.cursor;
    if env.find_among_b(A_34, context) == 0 {
        return false;
    }
    if env.cursor > env.limit_backward {
        return false;
    }
    if !env.slice_from("\u{03B9}\u{03BA}") {
        return false;
    }
    return true;
}

fn r_step_5a(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let v_1 = env.limit - env.cursor;
    'lab0: loop {
        env.ket = env.cursor;
        if !env.eq_s_b(&"\u{03B1}\u{03B3}\u{03B1}\u{03BC}\u{03B5}") {
            break 'lab0;
        }
        env.bra = env.cursor;
        if env.cursor > env.limit_backward {
            break 'lab0;
        }
        if !env.slice_from("\u{03B1}\u{03B3}\u{03B1}\u{03BC}") {
            return false;
        }
        break 'lab0;
    }
    env.cursor = env.limit - v_1;
    let v_2 = env.limit - env.cursor;
    'lab1: loop {
        env.ket = env.cursor;
        if (env.cursor - 9 <= env.limit_backward
            || env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 181 as u8)
        {
            break 'lab1;
        }
        if env.find_among_b(A_35, context) == 0 {
            break 'lab1;
        }
        env.bra = env.cursor;
        if !env.slice_del() {
            return false;
        }
        context.b_test1 = false;
        break 'lab1;
    }
    env.cursor = env.limit - v_2;
    env.ket = env.cursor;
    if !env.eq_s_b(&"\u{03B1}\u{03BC}\u{03B5}") {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    env.ket = env.cursor;
    env.bra = env.cursor;
    if env.find_among_b(A_36, context) == 0 {
        return false;
    }
    if env.cursor > env.limit_backward {
        return false;
    }
    if !env.slice_from("\u{03B1}\u{03BC}") {
        return false;
    }
    return true;
}

fn r_step_5b(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let v_1 = env.limit - env.cursor;
    'lab0: loop {
        env.ket = env.cursor;
        if (env.cursor - 9 <= env.limit_backward
            || env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 181 as u8)
        {
            break 'lab0;
        }
        if env.find_among_b(A_38, context) == 0 {
            break 'lab0;
        }
        env.bra = env.cursor;
        if !env.slice_del() {
            return false;
        }
        context.b_test1 = false;
        env.ket = env.cursor;
        env.bra = env.cursor;
        if (env.cursor - 3 <= env.limit_backward
            || (env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 129 as u8
                && env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 131 as u8))
        {
            break 'lab0;
        }
        if env.find_among_b(A_37, context) == 0 {
            break 'lab0;
        }
        if env.cursor > env.limit_backward {
            break 'lab0;
        }
        if !env.slice_from("\u{03B1}\u{03B3}\u{03B1}\u{03BD}") {
            return false;
        }
        break 'lab0;
    }
    env.cursor = env.limit - v_1;
    env.ket = env.cursor;
    if !env.eq_s_b(&"\u{03B1}\u{03BD}\u{03B5}") {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    'lab1: loop {
        let v_2 = env.limit - env.cursor;
        'lab2: loop {
            env.ket = env.cursor;
            env.bra = env.cursor;
            if !env.in_grouping_b(G_v2, 945, 969) {
                break 'lab2;
            }
            if !env.slice_from("\u{03B1}\u{03BD}") {
                return false;
            }
            break 'lab1;
        }
        env.cursor = env.limit - v_2;
        env.ket = env.cursor;
        break 'lab1;
    }
    env.bra = env.cursor;
    if env.find_among_b(A_39, context) == 0 {
        return false;
    }
    if env.cursor > env.limit_backward {
        return false;
    }
    if !env.slice_from("\u{03B1}\u{03BD}") {
        return false;
    }
    return true;
}

fn r_step_5c(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let v_1 = env.limit - env.cursor;
    'lab0: loop {
        env.ket = env.cursor;
        if (env.cursor - 9 <= env.limit_backward
            || env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 181 as u8)
        {
            break 'lab0;
        }
        if env.find_among_b(A_40, context) == 0 {
            break 'lab0;
        }
        env.bra = env.cursor;
        if !env.slice_del() {
            return false;
        }
        context.b_test1 = false;
        break 'lab0;
    }
    env.cursor = env.limit - v_1;
    env.ket = env.cursor;
    if !env.eq_s_b(&"\u{03B5}\u{03C4}\u{03B5}") {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    'lab1: loop {
        let v_2 = env.limit - env.cursor;
        'lab2: loop {
            env.ket = env.cursor;
            env.bra = env.cursor;
            if !env.in_grouping_b(G_v2, 945, 969) {
                break 'lab2;
            }
            if !env.slice_from("\u{03B5}\u{03C4}") {
                return false;
            }
            break 'lab1;
        }
        env.cursor = env.limit - v_2;
        'lab3: loop {
            env.ket = env.cursor;
            env.bra = env.cursor;
            if env.find_among_b(A_41, context) == 0 {
                break 'lab3;
            }
            if !env.slice_from("\u{03B5}\u{03C4}") {
                return false;
            }
            break 'lab1;
        }
        env.cursor = env.limit - v_2;
        env.ket = env.cursor;
        break 'lab1;
    }
    env.bra = env.cursor;
    if env.find_among_b(A_42, context) == 0 {
        return false;
    }
    if env.cursor > env.limit_backward {
        return false;
    }
    if !env.slice_from("\u{03B5}\u{03C4}") {
        return false;
    }
    return true;
}

fn r_step_5d(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if (env.cursor - 9 <= env.limit_backward
        || env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 131 as u8)
    {
        return false;
    }
    if env.find_among_b(A_43, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    'lab0: loop {
        let v_1 = env.limit - env.cursor;
        'lab1: loop {
            env.ket = env.cursor;
            env.bra = env.cursor;
            if !env.eq_s_b(&"\u{03B1}\u{03C1}\u{03C7}") {
                break 'lab1;
            }
            if env.cursor > env.limit_backward {
                break 'lab1;
            }
            if !env.slice_from("\u{03BF}\u{03BD}\u{03C4}") {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        env.ket = env.cursor;
        env.bra = env.cursor;
        if !env.eq_s_b(&"\u{03BA}\u{03C1}\u{03B5}") {
            return false;
        }
        if !env.slice_from("\u{03C9}\u{03BD}\u{03C4}") {
            return false;
        }
        break 'lab0;
    }
    return true;
}

fn r_step_5e(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if (env.cursor - 11 <= env.limit_backward
        || env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 181 as u8)
    {
        return false;
    }
    if env.find_among_b(A_44, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    env.ket = env.cursor;
    env.bra = env.cursor;
    if !env.eq_s_b(&"\u{03BF}\u{03BD}") {
        return false;
    }
    if env.cursor > env.limit_backward {
        return false;
    }
    if !env.slice_from("\u{03BF}\u{03BC}\u{03B1}\u{03C3}\u{03C4}") {
        return false;
    }
    return true;
}

fn r_step_5f(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let v_1 = env.limit - env.cursor;
    'lab0: loop {
        env.ket = env.cursor;
        if !env.eq_s_b(&"\u{03B9}\u{03B5}\u{03C3}\u{03C4}\u{03B5}") {
            break 'lab0;
        }
        env.bra = env.cursor;
        if !env.slice_del() {
            return false;
        }
        context.b_test1 = false;
        env.ket = env.cursor;
        env.bra = env.cursor;
        if (env.cursor - 1 <= env.limit_backward
            || (env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 128 as u8
                && env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 134 as u8))
        {
            break 'lab0;
        }
        if env.find_among_b(A_45, context) == 0 {
            break 'lab0;
        }
        if env.cursor > env.limit_backward {
            break 'lab0;
        }
        if !env.slice_from("\u{03B9}\u{03B5}\u{03C3}\u{03C4}") {
            return false;
        }
        break 'lab0;
    }
    env.cursor = env.limit - v_1;
    env.ket = env.cursor;
    if !env.eq_s_b(&"\u{03B5}\u{03C3}\u{03C4}\u{03B5}") {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    env.ket = env.cursor;
    env.bra = env.cursor;
    if env.find_among_b(A_46, context) == 0 {
        return false;
    }
    if env.cursor > env.limit_backward {
        return false;
    }
    if !env.slice_from("\u{03B9}\u{03B5}\u{03C3}\u{03C4}") {
        return false;
    }
    return true;
}

fn r_step_5g(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let v_1 = env.limit - env.cursor;
    'lab0: loop {
        env.ket = env.cursor;
        if env.find_among_b(A_47, context) == 0 {
            break 'lab0;
        }
        env.bra = env.cursor;
        if !env.slice_del() {
            return false;
        }
        context.b_test1 = false;
        break 'lab0;
    }
    env.cursor = env.limit - v_1;
    env.ket = env.cursor;
    if env.find_among_b(A_50, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    'lab1: loop {
        let v_2 = env.limit - env.cursor;
        'lab2: loop {
            env.ket = env.cursor;
            env.bra = env.cursor;
            if env.find_among_b(A_48, context) == 0 {
                break 'lab2;
            }
            if !env.slice_from("\u{03B7}\u{03BA}") {
                return false;
            }
            break 'lab1;
        }
        env.cursor = env.limit - v_2;
        env.ket = env.cursor;
        env.bra = env.cursor;
        if (env.cursor - 1 <= env.limit_backward
            || env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 184 as u8)
        {
            return false;
        }
        if env.find_among_b(A_49, context) == 0 {
            return false;
        }
        if env.cursor > env.limit_backward {
            return false;
        }
        if !env.slice_from("\u{03B7}\u{03BA}") {
            return false;
        }
        break 'lab1;
    }
    return true;
}

fn r_step_5h(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if env.find_among_b(A_53, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    'lab0: loop {
        let v_1 = env.limit - env.cursor;
        'lab1: loop {
            env.ket = env.cursor;
            env.bra = env.cursor;
            if env.find_among_b(A_51, context) == 0 {
                break 'lab1;
            }
            if !env.slice_from("\u{03BF}\u{03C5}\u{03C3}") {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        env.ket = env.cursor;
        env.bra = env.cursor;
        if env.find_among_b(A_52, context) == 0 {
            return false;
        }
        if env.cursor > env.limit_backward {
            return false;
        }
        if !env.slice_from("\u{03BF}\u{03C5}\u{03C3}") {
            return false;
        }
        break 'lab0;
    }
    return true;
}

fn r_step_5i(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    env.ket = env.cursor;
    if env.find_among_b(A_56, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    'lab0: loop {
        let v_1 = env.limit - env.cursor;
        'lab1: loop {
            env.ket = env.cursor;
            env.bra = env.cursor;
            if !env.eq_s_b(&"\u{03BA}\u{03BF}\u{03BB}\u{03BB}") {
                break 'lab1;
            }
            if !env.slice_from("\u{03B1}\u{03B3}") {
                return false;
            }
            break 'lab0;
        }
        env.cursor = env.limit - v_1;
        'lab2: loop {
            let v_2 = env.limit - env.cursor;
            'lab3: loop {
                env.ket = env.cursor;
                env.bra = env.cursor;
                among_var = env.find_among_b(A_54, context);
                if among_var == 0 {
                    break 'lab3;
                }
                match among_var {
                    1 => {
                        if !env.slice_from("\u{03B1}\u{03B3}") {
                            return false;
                        }
                    }
                    _ => (),
                }
                break 'lab2;
            }
            env.cursor = env.limit - v_2;
            env.ket = env.cursor;
            env.bra = env.cursor;
            if env.find_among_b(A_55, context) == 0 {
                return false;
            }
            if env.cursor > env.limit_backward {
                return false;
            }
            if !env.slice_from("\u{03B1}\u{03B3}") {
                return false;
            }
            break 'lab2;
        }
        break 'lab0;
    }
    return true;
}

fn r_step_5j(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if env.find_among_b(A_57, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    env.ket = env.cursor;
    env.bra = env.cursor;
    if (env.cursor - 1 <= env.limit_backward
        || env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 189 as u8)
    {
        return false;
    }
    if env.find_among_b(A_58, context) == 0 {
        return false;
    }
    if env.cursor > env.limit_backward {
        return false;
    }
    if !env.slice_from("\u{03B7}\u{03C3}") {
        return false;
    }
    return true;
}

fn r_step_5k(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if (env.cursor - 7 <= env.limit_backward
        || env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 181 as u8)
    {
        return false;
    }
    if env.find_among_b(A_59, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    env.ket = env.cursor;
    env.bra = env.cursor;
    if env.find_among_b(A_60, context) == 0 {
        return false;
    }
    if env.cursor > env.limit_backward {
        return false;
    }
    if !env.slice_from("\u{03B7}\u{03C3}\u{03C4}") {
        return false;
    }
    return true;
}

fn r_step_5l(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if (env.cursor - 7 <= env.limit_backward
        || env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 181 as u8)
    {
        return false;
    }
    if env.find_among_b(A_61, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    env.ket = env.cursor;
    env.bra = env.cursor;
    if env.find_among_b(A_62, context) == 0 {
        return false;
    }
    if env.cursor > env.limit_backward {
        return false;
    }
    if !env.slice_from("\u{03BF}\u{03C5}\u{03BD}") {
        return false;
    }
    return true;
}

fn r_step_5m(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if (env.cursor - 7 <= env.limit_backward
        || env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 181 as u8)
    {
        return false;
    }
    if env.find_among_b(A_63, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    context.b_test1 = false;
    env.ket = env.cursor;
    env.bra = env.cursor;
    if env.find_among_b(A_64, context) == 0 {
        return false;
    }
    if env.cursor > env.limit_backward {
        return false;
    }
    if !env.slice_from("\u{03BF}\u{03C5}\u{03BC}") {
        return false;
    }
    return true;
}

fn r_step_6(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let v_1 = env.limit - env.cursor;
    'lab0: loop {
        env.ket = env.cursor;
        if env.find_among_b(A_65, context) == 0 {
            break 'lab0;
        }
        env.bra = env.cursor;
        if !env.slice_from("\u{03BC}\u{03B1}") {
            return false;
        }
        break 'lab0;
    }
    env.cursor = env.limit - v_1;
    if !context.b_test1 {
        return false;
    }
    env.ket = env.cursor;
    if env.find_among_b(A_66, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    return true;
}

fn r_step_7(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if (env.cursor - 7 <= env.limit_backward
        || (env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 129 as u8
            && env.current.as_bytes()[(env.cursor - 1) as usize] as u8 != 132 as u8))
    {
        return false;
    }
    if env.find_among_b(A_67, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    return true;
}

pub fn stem(env: &mut SnowballEnv) -> bool {
    let mut context = &mut Context { b_test1: false };
    env.limit_backward = env.cursor;
    env.cursor = env.limit;
    let v_1 = env.limit - env.cursor;
    r_tolower(env, context);
    env.cursor = env.limit - v_1;
    if !r_has_min_length(env, context) {
        return false;
    }
    context.b_test1 = true;
    let v_2 = env.limit - env.cursor;
    r_step_1(env, context);
    env.cursor = env.limit - v_2;
    let v_3 = env.limit - env.cursor;
    r_step_s1(env, context);
    env.cursor = env.limit - v_3;
    let v_4 = env.limit - env.cursor;
    r_step_s2(env, context);
    env.cursor = env.limit - v_4;
    let v_5 = env.limit - env.cursor;
    r_step_s3(env, context);
    env.cursor = env.limit - v_5;
    let v_6 = env.limit - env.cursor;
    r_step_s4(env, context);
    env.cursor = env.limit - v_6;
    let v_7 = env.limit - env.cursor;
    r_step_s5(env, context);
    env.cursor = env.limit - v_7;
    let v_8 = env.limit - env.cursor;
    r_step_s6(env, context);
    env.cursor = env.limit - v_8;
    let v_9 = env.limit - env.cursor;
    r_step_s7(env, context);
    env.cursor = env.limit - v_9;
    let v_10 = env.limit - env.cursor;
    r_step_s8(env, context);
    env.cursor = env.limit - v_10;
    let v_11 = env.limit - env.cursor;
    r_step_s9(env, context);
    env.cursor = env.limit - v_11;
    let v_12 = env.limit - env.cursor;
    r_step_s10(env, context);
    env.cursor = env.limit - v_12;
    let v_13 = env.limit - env.cursor;
    r_step_2a(env, context);
    env.cursor = env.limit - v_13;
    let v_14 = env.limit - env.cursor;
    r_step_2b(env, context);
    env.cursor = env.limit - v_14;
    let v_15 = env.limit - env.cursor;
    r_step_2c(env, context);
    env.cursor = env.limit - v_15;
    let v_16 = env.limit - env.cursor;
    r_step_2d(env, context);
    env.cursor = env.limit - v_16;
    let v_17 = env.limit - env.cursor;
    r_step_3(env, context);
    env.cursor = env.limit - v_17;
    let v_18 = env.limit - env.cursor;
    r_step_4(env, context);
    env.cursor = env.limit - v_18;
    let v_19 = env.limit - env.cursor;
    r_step_5a(env, context);
    env.cursor = env.limit - v_19;
    let v_20 = env.limit - env.cursor;
    r_step_5b(env, context);
    env.cursor = env.limit - v_20;
    let v_21 = env.limit - env.cursor;
    r_step_5c(env, context);
    env.cursor = env.limit - v_21;
    let v_22 = env.limit - env.cursor;
    r_step_5d(env, context);
    env.cursor = env.limit - v_22;
    let v_23 = env.limit - env.cursor;
    r_step_5e(env, context);
    env.cursor = env.limit - v_23;
    let v_24 = env.limit - env.cursor;
    r_step_5f(env, context);
    env.cursor = env.limit - v_24;
    let v_25 = env.limit - env.cursor;
    r_step_5g(env, context);
    env.cursor = env.limit - v_25;
    let v_26 = env.limit - env.cursor;
    r_step_5h(env, context);
    env.cursor = env.limit - v_26;
    let v_27 = env.limit - env.cursor;
    r_step_5j(env, context);
    env.cursor = env.limit - v_27;
    let v_28 = env.limit - env.cursor;
    r_step_5i(env, context);
    env.cursor = env.limit - v_28;
    let v_29 = env.limit - env.cursor;
    r_step_5k(env, context);
    env.cursor = env.limit - v_29;
    let v_30 = env.limit - env.cursor;
    r_step_5l(env, context);
    env.cursor = env.limit - v_30;
    let v_31 = env.limit - env.cursor;
    r_step_5m(env, context);
    env.cursor = env.limit - v_31;
    let v_32 = env.limit - env.cursor;
    r_step_6(env, context);
    env.cursor = env.limit - v_32;
    let v_33 = env.limit - env.cursor;
    r_step_7(env, context);
    env.cursor = env.limit - v_33;
    env.cursor = env.limit_backward;
    return true;
}
